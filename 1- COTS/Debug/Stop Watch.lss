
Stop Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000056c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000117f  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a31  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a34  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f2  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a01  00000000  00000000  000034de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 *********************************************************************************************************************/

int main(void)
{
	/* Replace with your application code */
	PORT_Init();
  82:	0e 94 30 02 	call	0x460	; 0x460 <PORT_Init>
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/

int main(void)
{
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	c0 e0       	ldi	r28, 0x00	; 0
	/* Replace with your application code */
	PORT_Init();
	Uint_8 b1 = 0 , b2 = 0 , b3 = 0 , minute = 0 , second = 0 ;
	while (1)
	{
		b1=Button_GetValue(Button_0);
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_GetValue>
		if (b1==0)
  90:	81 11       	cpse	r24, r1
  92:	04 c0       	rjmp	.+8      	; 0x9c <main+0x1a>
		{
			minute++;
  94:	cf 5f       	subi	r28, 0xFF	; 255
			if(minute == 10)
  96:	ca 30       	cpi	r28, 0x0A	; 10
  98:	09 f4       	brne	.+2      	; 0x9c <main+0x1a>
			{
				minute = 0;
  9a:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
		Seven_Seg_Display_minute(minute);
  9c:	8c 2f       	mov	r24, r28
  9e:	0e 94 83 00 	call	0x106	; 0x106 <Seven_Seg_Display_minute>
		b2=Button_GetValue(Button_1);
  a2:	8b e1       	ldi	r24, 0x1B	; 27
  a4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_GetValue>
		if (b2==0)
  a8:	81 11       	cpse	r24, r1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x32>
		{
			second++;
  ac:	df 5f       	subi	r29, 0xFF	; 255
			if(second == 10)
  ae:	da 30       	cpi	r29, 0x0A	; 10
  b0:	09 f4       	brne	.+2      	; 0xb4 <main+0x32>
			{
				second = 0;
  b2:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		Seven_Seg_Display_second(second);
  b4:	8d 2f       	mov	r24, r29
  b6:	0e 94 69 00 	call	0xd2	; 0xd2 <Seven_Seg_Display_second>
		b3=Button_GetValue(Button_2);
  ba:	8c e1       	ldi	r24, 0x1C	; 28
  bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_GetValue>
		if (b3==0)
  c0:	81 11       	cpse	r24, r1
  c2:	e3 cf       	rjmp	.-58     	; 0x8a <main+0x8>
		{
		Seven_Seg_Decrement_Counter_Start_End(minute,second);
  c4:	6d 2f       	mov	r22, r29
  c6:	8c 2f       	mov	r24, r28
  c8:	0e 94 9d 00 	call	0x13a	; 0x13a <Seven_Seg_Decrement_Counter_Start_End>
		minute = 0 , second = 0 ;
		Buzzer_Toggle();		
  cc:	0e 94 10 01 	call	0x220	; 0x220 <Buzzer_Toggle>
  d0:	da cf       	rjmp	.-76     	; 0x86 <main+0x4>

000000d2 <Seven_Seg_Display_second>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Seven_Seg_Display_second(Uint_8 second)
{
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
	
		DIO_WriteChannel(COMMON1,seven_high);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	86 e1       	ldi	r24, 0x16	; 22
  da:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		DIO_WriteChannel(COMMON2,seven_low );
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	87 e1       	ldi	r24, 0x17	; 23
  e2:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		DIO_WritePort(A , seven_seg[second]);
  e6:	ec 2f       	mov	r30, r28
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	60 81       	ld	r22, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <Seven_Seg_Display_second+0x28>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Seven_Seg_Display_second+0x2e>
 100:	00 00       	nop
		_delay_ms(1);
		
}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <Seven_Seg_Display_minute>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Seven_Seg_Display_minute(Uint_8 minute)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(COMMON1,seven_low );
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	86 e1       	ldi	r24, 0x16	; 22
 10e:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
	DIO_WriteChannel(COMMON2,seven_high);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	87 e1       	ldi	r24, 0x17	; 23
 116:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
	DIO_WritePort(A,seven_seg[minute]);
 11a:	ec 2f       	mov	r30, r28
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e0 5a       	subi	r30, 0xA0	; 160
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	60 81       	ld	r22, Z
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_WritePort>
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <Seven_Seg_Display_minute+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Seven_Seg_Display_minute+0x2e>
 134:	00 00       	nop
	_delay_ms(1);
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <Seven_Seg_Decrement_Counter_Start_End>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Seven_Seg_Decrement_Counter_Start_End(Sint_8 minute,Sint_8 second)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
	
	Sint_8 i = 0, j = 0;
	Uint_16 z = 0;
	for (i=minute;i>-1;i--)
 144:	3f c0       	rjmp	.+126    	; 0x1c4 <Seven_Seg_Decrement_Counter_Start_End+0x8a>
		for (j=second;j>-1;j--)
		{	
		     for(z=0;z<=5000;z++)
		      {
		     
		      DIO_WriteChannel(COMMON1,seven_low);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	86 e1       	ldi	r24, 0x16	; 22
 14a:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		      DIO_WriteChannel(COMMON2,seven_high);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	87 e1       	ldi	r24, 0x17	; 23
 152:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		      DIO_WritePort(A,seven_seg[i]);
 156:	e0 2f       	mov	r30, r16
 158:	00 2e       	mov	r0, r16
 15a:	00 0c       	add	r0, r0
 15c:	ff 0b       	sbc	r31, r31
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	60 81       	ld	r22, Z
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_WritePort>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Seven_Seg_Decrement_Counter_Start_End+0x34>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Seven_Seg_Decrement_Counter_Start_End+0x3a>
 174:	00 00       	nop
		      _delay_ms(1);
		       
		      DIO_WriteChannel(COMMON1,seven_high);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	86 e1       	ldi	r24, 0x16	; 22
 17a:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		      DIO_WriteChannel(COMMON2,seven_low);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	87 e1       	ldi	r24, 0x17	; 23
 182:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WriteChannel>
		      DIO_WritePort(A , seven_seg[j]);
 186:	e1 2f       	mov	r30, r17
 188:	01 2e       	mov	r0, r17
 18a:	00 0c       	add	r0, r0
 18c:	ff 0b       	sbc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	60 81       	ld	r22, Z
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_WritePort>
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <Seven_Seg_Decrement_Counter_Start_End+0x64>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <Seven_Seg_Decrement_Counter_Start_End+0x6a>
 1a4:	00 00       	nop
	Uint_16 z = 0;
	for (i=minute;i>-1;i--)
	{
		for (j=second;j>-1;j--)
		{	
		     for(z=0;z<=5000;z++)
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Seven_Seg_Decrement_Counter_Start_End+0x74>
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	c9 38       	cpi	r28, 0x89	; 137
 1b0:	93 e1       	ldi	r25, 0x13	; 19
 1b2:	d9 07       	cpc	r29, r25
 1b4:	40 f2       	brcs	.-112    	; 0x146 <Seven_Seg_Decrement_Counter_Start_End+0xc>
	
	Sint_8 i = 0, j = 0;
	Uint_16 z = 0;
	for (i=minute;i>-1;i--)
	{
		for (j=second;j>-1;j--)
 1b6:	11 50       	subi	r17, 0x01	; 1
		      DIO_WriteChannel(COMMON1,seven_high);
		      DIO_WriteChannel(COMMON2,seven_low);
		      DIO_WritePort(A , seven_seg[j]);
		      _delay_ms(1);
		      }		
			second=9;
 1b8:	69 e0       	ldi	r22, 0x09	; 9
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <Seven_Seg_Decrement_Counter_Start_End+0x84>
 1bc:	16 2f       	mov	r17, r22
	
	Sint_8 i = 0, j = 0;
	Uint_16 z = 0;
	for (i=minute;i>-1;i--)
	{
		for (j=second;j>-1;j--)
 1be:	11 23       	and	r17, r17
 1c0:	a4 f7       	brge	.-24     	; 0x1aa <Seven_Seg_Decrement_Counter_Start_End+0x70>
void Seven_Seg_Decrement_Counter_Start_End(Sint_8 minute,Sint_8 second)
{
	
	Sint_8 i = 0, j = 0;
	Uint_16 z = 0;
	for (i=minute;i>-1;i--)
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	00 23       	and	r16, r16
 1c6:	d4 f7       	brge	.-12     	; 0x1bc <Seven_Seg_Decrement_Counter_Start_End+0x82>
		      }		
			second=9;
		}	

	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <Button_GetValue>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
Uint_8 Button_GetValue(Uint_8 button_num)
{
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	00 d0       	rcall	.+0      	; 0x1da <Button_GetValue+0x8>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	18 2f       	mov	r17, r24
	Uint_8 button =1,temp=0;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	1a 82       	std	Y+2, r1	; 0x02
	DIO_ReadChannel(button_num,&button);
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	81 2f       	mov	r24, r17
 1ee:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_ReadChannel>
	while(temp==0)
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <Button_GetValue+0x2e>
	{
    DIO_ReadChannel(button_num,&temp);
 1f4:	be 01       	movw	r22, r28
 1f6:	6e 5f       	subi	r22, 0xFE	; 254
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	81 2f       	mov	r24, r17
 1fc:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_ReadChannel>
*******************************************************************************/
Uint_8 Button_GetValue(Uint_8 button_num)
{
	Uint_8 button =1,temp=0;
	DIO_ReadChannel(button_num,&button);
	while(temp==0)
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	88 23       	and	r24, r24
 204:	b9 f3       	breq	.-18     	; 0x1f4 <Button_GetValue+0x22>
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9c e9       	ldi	r25, 0x9C	; 156
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <Button_GetValue+0x38>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <Button_GetValue+0x3e>
 210:	00 00       	nop
	{
    DIO_ReadChannel(button_num,&temp);
	}
	_delay_ms(10);
	return button;
}
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <Buzzer_Toggle>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_Toggle(void)
{
	DIO_FlipChannel(Buzzer);
 220:	85 e1       	ldi	r24, 0x15	; 21
 222:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_FlipChannel>
 226:	08 95       	ret

00000228 <DIO_WriteChannel>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void DIO_WriteChannel(Uint_8 Pin_Num , PIN_VALUE_t Pin_Value)
{
	Uint_8 Port = 0 ,Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
 228:	98 2f       	mov	r25, r24
 22a:	96 95       	lsr	r25
 22c:	96 95       	lsr	r25
 22e:	96 95       	lsr	r25
	Pin = Pin_Num % NUMBER_OF_EACH_PORT_PINS;
 230:	87 70       	andi	r24, 0x07	; 7
	switch(Pin_Value)
 232:	66 23       	and	r22, r22
 234:	09 f4       	brne	.+2      	; 0x238 <DIO_WriteChannel+0x10>
 236:	3f c0       	rjmp	.+126    	; 0x2b6 <DIO_WriteChannel+0x8e>
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_WriteChannel+0x16>
 23c:	7b c0       	rjmp	.+246    	; 0x334 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH:
		switch (Port)
 23e:	91 30       	cpi	r25, 0x01	; 1
 240:	99 f0       	breq	.+38     	; 0x268 <DIO_WriteChannel+0x40>
 242:	28 f0       	brcs	.+10     	; 0x24e <DIO_WriteChannel+0x26>
 244:	92 30       	cpi	r25, 0x02	; 2
 246:	e9 f0       	breq	.+58     	; 0x282 <DIO_WriteChannel+0x5a>
 248:	93 30       	cpi	r25, 0x03	; 3
 24a:	41 f1       	breq	.+80     	; 0x29c <DIO_WriteChannel+0x74>
 24c:	08 95       	ret
		{
			case 0:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 24e:	4b b3       	in	r20, 0x1b	; 27
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WriteChannel+0x34>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WriteChannel+0x30>
 260:	cb 01       	movw	r24, r22
 262:	84 2b       	or	r24, r20
 264:	8b bb       	out	0x1b, r24	; 27
			break;
 266:	08 95       	ret
			
			case 1:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 268:	48 b3       	in	r20, 0x18	; 24
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_WriteChannel+0x4e>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_WriteChannel+0x4a>
 27a:	cb 01       	movw	r24, r22
 27c:	84 2b       	or	r24, r20
 27e:	88 bb       	out	0x18, r24	; 24
			break;
 280:	08 95       	ret
			
			case 2:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 282:	45 b3       	in	r20, 0x15	; 21
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_WriteChannel+0x68>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_WriteChannel+0x64>
 294:	cb 01       	movw	r24, r22
 296:	84 2b       	or	r24, r20
 298:	85 bb       	out	0x15, r24	; 21
			break;
 29a:	08 95       	ret
			
			case 3:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 29c:	42 b3       	in	r20, 0x12	; 18
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_WriteChannel+0x82>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_WriteChannel+0x7e>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	82 bb       	out	0x12, r24	; 18
			break;
 2b4:	08 95       	ret
			
			break;
		}
		break;
		case PIN_LOW: 
		switch (Port)
 2b6:	91 30       	cpi	r25, 0x01	; 1
 2b8:	a1 f0       	breq	.+40     	; 0x2e2 <DIO_WriteChannel+0xba>
 2ba:	28 f0       	brcs	.+10     	; 0x2c6 <DIO_WriteChannel+0x9e>
 2bc:	92 30       	cpi	r25, 0x02	; 2
 2be:	f9 f0       	breq	.+62     	; 0x2fe <DIO_WriteChannel+0xd6>
 2c0:	93 30       	cpi	r25, 0x03	; 3
 2c2:	59 f1       	breq	.+86     	; 0x31a <DIO_WriteChannel+0xf2>
 2c4:	08 95       	ret
		{
			case 0:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 2c6:	4b b3       	in	r20, 0x1b	; 27
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_WriteChannel+0xac>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_WriteChannel+0xa8>
 2d8:	cb 01       	movw	r24, r22
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8b bb       	out	0x1b, r24	; 27
			break;
 2e0:	08 95       	ret
			
			case 1:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 2e2:	48 b3       	in	r20, 0x18	; 24
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_WriteChannel+0xc8>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_WriteChannel+0xc4>
 2f4:	cb 01       	movw	r24, r22
 2f6:	80 95       	com	r24
 2f8:	84 23       	and	r24, r20
 2fa:	88 bb       	out	0x18, r24	; 24
			break;
 2fc:	08 95       	ret
			
			case 2:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 2fe:	45 b3       	in	r20, 0x15	; 21
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_WriteChannel+0xe4>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_WriteChannel+0xe0>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	85 bb       	out	0x15, r24	; 21
			break;
 318:	08 95       	ret
			
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 31a:	42 b3       	in	r20, 0x12	; 18
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_WriteChannel+0x100>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_WriteChannel+0xfc>
 32c:	cb 01       	movw	r24, r22
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	82 bb       	out	0x12, r24	; 18
 334:	08 95       	ret

00000336 <DIO_ReadChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_ReadChannel(Uint_8 Pin_Num , PIN_VALUE_t *Pin_Value)
{
	Uint_8 Port = 0 ,Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
 336:	98 2f       	mov	r25, r24
 338:	96 95       	lsr	r25
 33a:	96 95       	lsr	r25
 33c:	96 95       	lsr	r25
	Pin = Pin_Num % NUMBER_OF_EACH_PORT_PINS;
 33e:	87 70       	andi	r24, 0x07	; 7
	switch (Port)
 340:	91 30       	cpi	r25, 0x01	; 1
 342:	99 f0       	breq	.+38     	; 0x36a <DIO_ReadChannel+0x34>
 344:	28 f0       	brcs	.+10     	; 0x350 <DIO_ReadChannel+0x1a>
 346:	92 30       	cpi	r25, 0x02	; 2
 348:	e9 f0       	breq	.+58     	; 0x384 <DIO_ReadChannel+0x4e>
 34a:	93 30       	cpi	r25, 0x03	; 3
 34c:	41 f1       	breq	.+80     	; 0x39e <DIO_ReadChannel+0x68>
 34e:	08 95       	ret
	{
		case 0:
		*Pin_Value= GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN),Pin);
 350:	29 b3       	in	r18, 0x19	; 25
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	a9 01       	movw	r20, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_ReadChannel+0x26>
 358:	55 95       	asr	r21
 35a:	47 95       	ror	r20
 35c:	8a 95       	dec	r24
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_ReadChannel+0x22>
 360:	ca 01       	movw	r24, r20
 362:	81 70       	andi	r24, 0x01	; 1
 364:	fb 01       	movw	r30, r22
 366:	80 83       	st	Z, r24
		break;
 368:	08 95       	ret
		
		case 1:
		*Pin_Value=GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN),Pin);
 36a:	26 b3       	in	r18, 0x16	; 22
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	a9 01       	movw	r20, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_ReadChannel+0x40>
 372:	55 95       	asr	r21
 374:	47 95       	ror	r20
 376:	8a 95       	dec	r24
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_ReadChannel+0x3c>
 37a:	ca 01       	movw	r24, r20
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	fb 01       	movw	r30, r22
 380:	80 83       	st	Z, r24
		break;
 382:	08 95       	ret
		
		case 2:
		*Pin_Value=GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN),Pin);
 384:	23 b3       	in	r18, 0x13	; 19
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	a9 01       	movw	r20, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_ReadChannel+0x5a>
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_ReadChannel+0x56>
 394:	ca 01       	movw	r24, r20
 396:	81 70       	andi	r24, 0x01	; 1
 398:	fb 01       	movw	r30, r22
 39a:	80 83       	st	Z, r24
		break;
 39c:	08 95       	ret
		
		case 3:
		*Pin_Value=GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN),Pin);
 39e:	20 b3       	in	r18, 0x10	; 16
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	a9 01       	movw	r20, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ReadChannel+0x74>
 3a6:	55 95       	asr	r21
 3a8:	47 95       	ror	r20
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ReadChannel+0x70>
 3ae:	ca 01       	movw	r24, r20
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	fb 01       	movw	r30, r22
 3b4:	80 83       	st	Z, r24
 3b6:	08 95       	ret

000003b8 <DIO_FlipChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_FlipChannel(Uint_8 Pin_Num)
{
	Uint_8 Port = 0 ,Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
 3b8:	98 2f       	mov	r25, r24
 3ba:	96 95       	lsr	r25
 3bc:	96 95       	lsr	r25
 3be:	96 95       	lsr	r25
	Pin = Pin_Num % NUMBER_OF_EACH_PORT_PINS;
 3c0:	87 70       	andi	r24, 0x07	; 7
	switch (Port)
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	99 f0       	breq	.+38     	; 0x3ec <DIO_FlipChannel+0x34>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_FlipChannel+0x1a>
 3c8:	92 30       	cpi	r25, 0x02	; 2
 3ca:	e9 f0       	breq	.+58     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3cc:	93 30       	cpi	r25, 0x03	; 3
 3ce:	41 f1       	breq	.+80     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3d0:	08 95       	ret
	{
		case 0:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 3d2:	4b b3       	in	r20, 0x1b	; 27
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	b9 01       	movw	r22, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_FlipChannel+0x28>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_FlipChannel+0x24>
 3e4:	cb 01       	movw	r24, r22
 3e6:	84 27       	eor	r24, r20
 3e8:	8b bb       	out	0x1b, r24	; 27
		break;
 3ea:	08 95       	ret
		
		case 1:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 3ec:	48 b3       	in	r20, 0x18	; 24
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_FlipChannel+0x42>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_FlipChannel+0x3e>
 3fe:	cb 01       	movw	r24, r22
 400:	84 27       	eor	r24, r20
 402:	88 bb       	out	0x18, r24	; 24
		break;
 404:	08 95       	ret
		
		case 2:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 406:	45 b3       	in	r20, 0x15	; 21
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	84 27       	eor	r24, r20
 41c:	85 bb       	out	0x15, r24	; 21
		break;
 41e:	08 95       	ret
		
		case 3:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 420:	42 b3       	in	r20, 0x12	; 18
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	84 27       	eor	r24, r20
 436:	82 bb       	out	0x12, r24	; 18
 438:	08 95       	ret

0000043a <DIO_WritePort>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WritePort(Uint_8 Pin_Num , Uint_8 PORT_Value)
{
	Uint_8 Port = 0 ;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
 43a:	86 95       	lsr	r24
 43c:	86 95       	lsr	r24
 43e:	86 95       	lsr	r24
	
	
	switch (Port)
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	41 f0       	breq	.+16     	; 0x454 <DIO_WritePort+0x1a>
 444:	28 f0       	brcs	.+10     	; 0x450 <DIO_WritePort+0x16>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	39 f0       	breq	.+14     	; 0x458 <DIO_WritePort+0x1e>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	39 f0       	breq	.+14     	; 0x45c <DIO_WritePort+0x22>
 44e:	08 95       	ret
	{
		case 0:
		PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT)= PORT_Value;
 450:	6b bb       	out	0x1b, r22	; 27
		break;
 452:	08 95       	ret
		
		case 1:
		PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT)= PORT_Value;
 454:	68 bb       	out	0x18, r22	; 24
		break;
 456:	08 95       	ret
		
		case 2:
		PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT)= PORT_Value;
 458:	65 bb       	out	0x15, r22	; 21
		break;
 45a:	08 95       	ret
		
		case 3:
		PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT)= PORT_Value;
 45c:	62 bb       	out	0x12, r22	; 18
 45e:	08 95       	ret

00000460 <PORT_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	7e c0       	rjmp	.+252    	; 0x560 <PORT_Init+0x100>
	{
		port=PORT_Initialization[cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS;
 464:	e9 2f       	mov	r30, r25
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	e6 59       	subi	r30, 0x96	; 150
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	80 81       	ld	r24, Z
 472:	28 2f       	mov	r18, r24
 474:	26 95       	lsr	r18
 476:	26 95       	lsr	r18
 478:	26 95       	lsr	r18
		pin=PORT_Initialization[cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS;
 47a:	87 70       	andi	r24, 0x07	; 7
		dir = PORT_Initialization[cnt].PIN_DIR;
 47c:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(dir)
 47e:	33 23       	and	r19, r19
 480:	b9 f1       	breq	.+110    	; 0x4f0 <PORT_Init+0x90>
 482:	31 30       	cpi	r19, 0x01	; 1
 484:	09 f0       	breq	.+2      	; 0x488 <PORT_Init+0x28>
 486:	6b c0       	rjmp	.+214    	; 0x55e <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			switch (port)
 488:	21 30       	cpi	r18, 0x01	; 1
 48a:	89 f0       	breq	.+34     	; 0x4ae <PORT_Init+0x4e>
 48c:	28 f0       	brcs	.+10     	; 0x498 <PORT_Init+0x38>
 48e:	22 30       	cpi	r18, 0x02	; 2
 490:	c9 f0       	breq	.+50     	; 0x4c4 <PORT_Init+0x64>
 492:	23 30       	cpi	r18, 0x03	; 3
 494:	11 f1       	breq	.+68     	; 0x4da <PORT_Init+0x7a>
 496:	63 c0       	rjmp	.+198    	; 0x55e <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 498:	4a b3       	in	r20, 0x1a	; 26
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <PORT_Init+0x44>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <PORT_Init+0x40>
 4a8:	24 2b       	or	r18, r20
 4aa:	2a bb       	out	0x1a, r18	; 26
				break;
 4ac:	58 c0       	rjmp	.+176    	; 0x55e <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 4ae:	47 b3       	in	r20, 0x17	; 23
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <PORT_Init+0x5a>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <PORT_Init+0x56>
 4be:	24 2b       	or	r18, r20
 4c0:	27 bb       	out	0x17, r18	; 23
				break;
 4c2:	4d c0       	rjmp	.+154    	; 0x55e <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 4c4:	44 b3       	in	r20, 0x14	; 20
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <PORT_Init+0x70>
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <PORT_Init+0x6c>
 4d4:	24 2b       	or	r18, r20
 4d6:	24 bb       	out	0x14, r18	; 20
				break;
 4d8:	42 c0       	rjmp	.+132    	; 0x55e <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 4da:	41 b3       	in	r20, 0x11	; 17
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <PORT_Init+0x86>
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <PORT_Init+0x82>
 4ea:	24 2b       	or	r18, r20
 4ec:	21 bb       	out	0x11, r18	; 17
				break;
 4ee:	37 c0       	rjmp	.+110    	; 0x55e <PORT_Init+0xfe>
				break;
			}
			break;
			
			case  PIN_INPUT :
			switch (port)
 4f0:	21 30       	cpi	r18, 0x01	; 1
 4f2:	91 f0       	breq	.+36     	; 0x518 <PORT_Init+0xb8>
 4f4:	28 f0       	brcs	.+10     	; 0x500 <PORT_Init+0xa0>
 4f6:	22 30       	cpi	r18, 0x02	; 2
 4f8:	d9 f0       	breq	.+54     	; 0x530 <PORT_Init+0xd0>
 4fa:	23 30       	cpi	r18, 0x03	; 3
 4fc:	29 f1       	breq	.+74     	; 0x548 <PORT_Init+0xe8>
 4fe:	2f c0       	rjmp	.+94     	; 0x55e <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 500:	4a b3       	in	r20, 0x1a	; 26
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <PORT_Init+0xac>
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <PORT_Init+0xa8>
 510:	20 95       	com	r18
 512:	24 23       	and	r18, r20
 514:	2a bb       	out	0x1a, r18	; 26
				break;
 516:	23 c0       	rjmp	.+70     	; 0x55e <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 518:	47 b3       	in	r20, 0x17	; 23
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <PORT_Init+0xc4>
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <PORT_Init+0xc0>
 528:	20 95       	com	r18
 52a:	24 23       	and	r18, r20
 52c:	27 bb       	out	0x17, r18	; 23
				break;																	   
 52e:	17 c0       	rjmp	.+46     	; 0x55e <PORT_Init+0xfe>
																						   
				case 2:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 530:	44 b3       	in	r20, 0x14	; 20
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <PORT_Init+0xdc>
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <PORT_Init+0xd8>
 540:	20 95       	com	r18
 542:	24 23       	and	r18, r20
 544:	24 bb       	out	0x14, r18	; 20
				break;																	   
 546:	0b c0       	rjmp	.+22     	; 0x55e <PORT_Init+0xfe>
																						   
				case 3:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 548:	41 b3       	in	r20, 0x11	; 17
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <PORT_Init+0xf4>
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	8a 95       	dec	r24
 556:	e2 f7       	brpl	.-8      	; 0x550 <PORT_Init+0xf0>
 558:	20 95       	com	r18
 55a:	24 23       	and	r18, r20
 55c:	21 bb       	out	0x11, r18	; 17
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
 55e:	9f 5f       	subi	r25, 0xFF	; 255
 560:	9f 30       	cpi	r25, 0x0F	; 15
 562:	08 f4       	brcc	.+2      	; 0x566 <PORT_Init+0x106>
 564:	7f cf       	rjmp	.-258    	; 0x464 <PORT_Init+0x4>
			
			break;
		}
	}
	
}
 566:	08 95       	ret

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
