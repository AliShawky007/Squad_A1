
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000058c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000111e  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000acc  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab9  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000584  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d9  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

/*project to take from user miutes and seconds to set timer*/
int main(void)
{
	/*init the used pins in project*/
	PORT_Init();
  82:	0e 94 40 02 	call	0x480	; 0x480 <PORT_Init>
	
	uint8 BTN1 = 0,BTN2 = 0,BTN3 = 0,BTN4 = 0,Sec=0,Min=0,Clock=0;
  86:	00 e0       	ldi	r16, 0x00	; 0
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	04 c0       	rjmp	.+8      	; 0x94 <main+0x12>
			btn 3 starts the timer*/
			if ( BTN1 == pressed)
			{
				if (Min==9)/*return to 0 if exceeds 9*/
				{
					Min=0;
  8c:	00 e0       	ldi	r16, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x12>
				if (Sec==0 && Min==0) continue; /*guard if no time is set dont do any thing*/
				break;
			}
			if (BTN4 == pressed) /*Restart and ask for new inputs if btn 4 is pressed*/
			{
				Min=0;
  90:	00 e0       	ldi	r16, 0x00	; 0
				Sec=0;
  92:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{

		while (1)
		{
			BTN1 = BTN_GetValue(Button_0);
  94:	8a e1       	ldi	r24, 0x1A	; 26
  96:	0e 94 b3 00 	call	0x166	; 0x166 <BTN_GetValue>
  9a:	d8 2f       	mov	r29, r24
			BTN2 = BTN_GetValue(Button_1);
  9c:	8b e1       	ldi	r24, 0x1B	; 27
  9e:	0e 94 b3 00 	call	0x166	; 0x166 <BTN_GetValue>
  a2:	c8 2f       	mov	r28, r24
			BTN3 = BTN_GetValue(Button_2);
  a4:	8c e1       	ldi	r24, 0x1C	; 28
  a6:	0e 94 b3 00 	call	0x166	; 0x166 <BTN_GetValue>
  aa:	f8 2e       	mov	r15, r24
			BTN4 = BTN_GetValue(Button_3);
  ac:	8d e1       	ldi	r24, 0x1D	; 29
  ae:	0e 94 b3 00 	call	0x166	; 0x166 <BTN_GetValue>
			/*conditions check which button was pressed and btn1 increment the minutes , btn2 the seconds
			btn 3 starts the timer*/
			if ( BTN1 == pressed)
  b2:	d1 11       	cpse	r29, r1
  b4:	03 c0       	rjmp	.+6      	; 0xbc <main+0x3a>
			{
				if (Min==9)/*return to 0 if exceeds 9*/
  b6:	09 30       	cpi	r16, 0x09	; 9
  b8:	49 f3       	breq	.-46     	; 0x8c <main+0xa>
				{
					Min=0;
					continue;
				}
				Min++;
  ba:	0f 5f       	subi	r16, 0xFF	; 255
			}
		
			if (BTN2 == pressed)
  bc:	c1 11       	cpse	r28, r1
  be:	06 c0       	rjmp	.+12     	; 0xcc <main+0x4a>
			{
				if (Sec==6) /*return to 0 if exceeds 9*/
  c0:	16 30       	cpi	r17, 0x06	; 6
  c2:	19 f4       	brne	.+6      	; 0xca <main+0x48>
				{
					Min++;
  c4:	0f 5f       	subi	r16, 0xFF	; 255
					Sec=0;
  c6:	10 e0       	ldi	r17, 0x00	; 0
					continue;
  c8:	e5 cf       	rjmp	.-54     	; 0x94 <main+0x12>
				}
				Sec++;
  ca:	1f 5f       	subi	r17, 0xFF	; 255
			}
		
			if (BTN3 == pressed)
  cc:	f1 10       	cpse	r15, r1
  ce:	05 c0       	rjmp	.+10     	; 0xda <main+0x58>
			{
				if (Sec==0 && Min==0) continue; /*guard if no time is set dont do any thing*/
  d0:	11 11       	cpse	r17, r1
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <main+0x70>
  d4:	00 23       	and	r16, r16
  d6:	f1 f2       	breq	.-68     	; 0x94 <main+0x12>
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <main+0x70>
				break;
			}
			if (BTN4 == pressed) /*Restart and ask for new inputs if btn 4 is pressed*/
  da:	88 23       	and	r24, r24
  dc:	c9 f2       	breq	.-78     	; 0x90 <main+0xe>
				Min=0;
				Sec=0;
				continue;
			}
			/*display the minutes and seconds on left digit*/
			Clock=(Min*10)+Sec;
  de:	90 2f       	mov	r25, r16
  e0:	99 0f       	add	r25, r25
  e2:	89 2f       	mov	r24, r25
  e4:	88 0f       	add	r24, r24
  e6:	88 0f       	add	r24, r24
  e8:	89 0f       	add	r24, r25
			SevSeg_Display(Clock);
  ea:	81 0f       	add	r24, r17
  ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SevSeg_Display>
  f0:	d1 cf       	rjmp	.-94     	; 0x94 <main+0x12>
		}
		/*timer for minutes*/
		for ( ; Min>=0 ; Min-- ) /*counter for minutes to display on digit*/
		{
			if(Min==0)break;
  f2:	00 23       	and	r16, r16
  f4:	89 f0       	breq	.+34     	; 0x118 <main+0x96>
  f6:	c0 e3       	ldi	r28, 0x30	; 48
  f8:	d5 e7       	ldi	r29, 0x75	; 117
			for (i = (60*500) ; i>=0 ; i--) /*loop for delaying the counter by 1 minute*/
			{
				Clock=(Min*10)+Sec;
  fa:	90 2f       	mov	r25, r16
  fc:	99 0f       	add	r25, r25
  fe:	89 2f       	mov	r24, r25
 100:	88 0f       	add	r24, r24
 102:	88 0f       	add	r24, r24
 104:	89 0f       	add	r24, r25
				SevSeg_Display(Clock);
 106:	81 0f       	add	r24, r17
 108:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SevSeg_Display>
				if (i==0) break;
 10c:	20 97       	sbiw	r28, 0x00	; 0
 10e:	11 f0       	breq	.+4      	; 0x114 <main+0x92>
		}
		/*timer for minutes*/
		for ( ; Min>=0 ; Min-- ) /*counter for minutes to display on digit*/
		{
			if(Min==0)break;
			for (i = (60*500) ; i>=0 ; i--) /*loop for delaying the counter by 1 minute*/
 110:	21 97       	sbiw	r28, 0x01	; 1
			{
				Clock=(Min*10)+Sec;
				SevSeg_Display(Clock);
				if (i==0) break;
			}			
 112:	f3 cf       	rjmp	.-26     	; 0xfa <main+0x78>
			/*display the minutes and seconds on left digit*/
			Clock=(Min*10)+Sec;
			SevSeg_Display(Clock);
		}
		/*timer for minutes*/
		for ( ; Min>=0 ; Min-- ) /*counter for minutes to display on digit*/
 114:	01 50       	subi	r16, 0x01	; 1
			{
				Clock=(Min*10)+Sec;
				SevSeg_Display(Clock);
				if (i==0) break;
			}			
		}
 116:	ed cf       	rjmp	.-38     	; 0xf2 <main+0x70>
		/*timer for seconds*/
		for (Sec=Sec*10 ; Sec>=0 ; Sec-- )
 118:	11 0f       	add	r17, r17
 11a:	81 2f       	mov	r24, r17
 11c:	88 0f       	add	r24, r24
 11e:	88 0f       	add	r24, r24
 120:	18 0f       	add	r17, r24
		{
			if (Sec==0)break;
 122:	11 23       	and	r17, r17
 124:	59 f0       	breq	.+22     	; 0x13c <main+0xba>
 126:	c4 ef       	ldi	r28, 0xF4	; 244
 128:	d1 e0       	ldi	r29, 0x01	; 1
			for (i = 500 ; i>=0 ; i--) /*loop for delaying the counter by 1 second and display it on both digits*/
			{
				SevSeg_Display(Sec);
 12a:	81 2f       	mov	r24, r17
 12c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SevSeg_Display>
				if (i==0) break;
 130:	20 97       	sbiw	r28, 0x00	; 0
 132:	11 f0       	breq	.+4      	; 0x138 <main+0xb6>
		}
		/*timer for seconds*/
		for (Sec=Sec*10 ; Sec>=0 ; Sec-- )
		{
			if (Sec==0)break;
			for (i = 500 ; i>=0 ; i--) /*loop for delaying the counter by 1 second and display it on both digits*/
 134:	21 97       	sbiw	r28, 0x01	; 1
			{
				SevSeg_Display(Sec);
				if (i==0) break;
			}
 136:	f9 cf       	rjmp	.-14     	; 0x12a <main+0xa8>
				SevSeg_Display(Clock);
				if (i==0) break;
			}			
		}
		/*timer for seconds*/
		for (Sec=Sec*10 ; Sec>=0 ; Sec-- )
 138:	11 50       	subi	r17, 0x01	; 1
			for (i = 500 ; i>=0 ; i--) /*loop for delaying the counter by 1 second and display it on both digits*/
			{
				SevSeg_Display(Sec);
				if (i==0) break;
			}
		}
 13a:	f3 cf       	rjmp	.-26     	; 0x122 <main+0xa0>
		/*buzzer loop to alerts after timer is off and restarts and ask for new inputs if btn 4 is pressed*/
		while(1)
		{	
			BTN4 = BTN_GetValue(Button_3);
 13c:	8d e1       	ldi	r24, 0x1D	; 29
 13e:	0e 94 b3 00 	call	0x166	; 0x166 <BTN_GetValue>
 142:	c8 2f       	mov	r28, r24
			BUZZER_toggle();
 144:	0e 94 df 00 	call	0x1be	; 0x1be <BUZZER_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	99 e0       	ldi	r25, 0x09	; 9
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xcc>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd6>
 158:	00 00       	nop
			_delay_ms(200);
			if(BTN4 == pressed)
 15a:	c1 11       	cpse	r28, r1
 15c:	ef cf       	rjmp	.-34     	; 0x13c <main+0xba>
			{
				BUZZER_SET_VALUE(BUZZER_LOW);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 da 00 	call	0x1b4	; 0x1b4 <BUZZER_SET_VALUE>
				break;
			}
		}
	}		
 164:	97 cf       	rjmp	.-210    	; 0x94 <main+0x12>

00000166 <BTN_GetValue>:
* \Parameters (out): None
* \Return value:   : uint8  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 BTN_GetValue(uint8 Button_num)
{
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <BTN_GetValue+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	18 2f       	mov	r17, r24
	uint8 button = 1, temp = 0;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	1a 82       	std	Y+2, r1	; 0x02
	
	DIO_ReadChennel(Button_num , &button);
 17a:	be 01       	movw	r22, r28
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	81 2f       	mov	r24, r17
 182:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_ReadChennel>
	
	while(temp == 0)
 186:	06 c0       	rjmp	.+12     	; 0x194 <BTN_GetValue+0x2e>
	{
		DIO_ReadChennel(Button_num , &temp);
 188:	be 01       	movw	r22, r28
 18a:	6e 5f       	subi	r22, 0xFE	; 254
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	81 2f       	mov	r24, r17
 190:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_ReadChennel>
{
	uint8 button = 1, temp = 0;
	
	DIO_ReadChennel(Button_num , &button);
	
	while(temp == 0)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	88 23       	and	r24, r24
 198:	b9 f3       	breq	.-18     	; 0x188 <BTN_GetValue+0x22>
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <BTN_GetValue+0x38>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <BTN_GetValue+0x3e>
 1a4:	00 00       	nop
		DIO_ReadChennel(Button_num , &temp);
	}
	_delay_ms(10);
	
	return button;
}
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <BUZZER_SET_VALUE>:
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void BUZZER_SET_VALUE(BUZZER_VALUE_t BUZZER_Value)
{
	DIO_WriteChennel(BUZZER,BUZZER_Value);
 1b4:	68 2f       	mov	r22, r24
 1b6:	85 e1       	ldi	r24, 0x15	; 21
 1b8:	0e 94 24 01 	call	0x248	; 0x248 <DIO_WriteChennel>
 1bc:	08 95       	ret

000001be <BUZZER_toggle>:
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void BUZZER_toggle(void)
{
	DIO_FlipChennel(BUZZER);
 1be:	85 e1       	ldi	r24, 0x15	; 21
 1c0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_FlipChennel>
 1c4:	08 95       	ret

000001c6 <SevSeg_Display>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void SevSeg_Display(uint8 Value)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	d8 2f       	mov	r29, r24
	DIO_WriteChennel(DIG1,PIN_HIGH);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	86 e1       	ldi	r24, 0x16	; 22
 1d0:	0e 94 24 01 	call	0x248	; 0x248 <DIO_WriteChennel>
	DIO_WriteChennel(PORTC_PIN7,PIN_LOW);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	87 e1       	ldi	r24, 0x17	; 23
 1d8:	0e 94 24 01 	call	0x248	; 0x248 <DIO_WriteChennel>
	DIO_WritePort(SevSeg ,Seven_Segment_Values_g[Value%10]);
 1dc:	ed ec       	ldi	r30, 0xCD	; 205
 1de:	de 9f       	mul	r29, r30
 1e0:	e1 2d       	mov	r30, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	ce 2f       	mov	r28, r30
 1e6:	c6 95       	lsr	r28
 1e8:	c6 95       	lsr	r28
 1ea:	c6 95       	lsr	r28
 1ec:	9c 2f       	mov	r25, r28
 1ee:	99 0f       	add	r25, r25
 1f0:	89 2f       	mov	r24, r25
 1f2:	88 0f       	add	r24, r24
 1f4:	88 0f       	add	r24, r24
 1f6:	89 0f       	add	r24, r25
 1f8:	d8 1b       	sub	r29, r24
 1fa:	ed 2f       	mov	r30, r29
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e2 58       	subi	r30, 0x82	; 130
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	60 81       	ld	r22, Z
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_WritePort>
 20a:	8f e9       	ldi	r24, 0x9F	; 159
 20c:	9f e0       	ldi	r25, 0x0F	; 15
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <SevSeg_Display+0x48>
 212:	00 c0       	rjmp	.+0      	; 0x214 <SevSeg_Display+0x4e>
 214:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChennel(DIG1,PIN_LOW);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	86 e1       	ldi	r24, 0x16	; 22
 21a:	0e 94 24 01 	call	0x248	; 0x248 <DIO_WriteChennel>
	DIO_WriteChennel(DIG2,PIN_HIGH);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	87 e1       	ldi	r24, 0x17	; 23
 222:	0e 94 24 01 	call	0x248	; 0x248 <DIO_WriteChennel>
	DIO_WritePort(SevSeg ,Seven_Segment_Values_g[Value/10]);
 226:	ec 2f       	mov	r30, r28
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	e2 58       	subi	r30, 0x82	; 130
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	60 81       	ld	r22, Z
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_WritePort>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <SevSeg_Display+0x74>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <SevSeg_Display+0x7a>
 240:	00 00       	nop
	_delay_ms(1);	
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <DIO_WriteChennel>:
*******************************************************************************/
void DIO_WriteChennel(uint8 Pin_Num , PIN_VALUE_t Pin_value )
{
	uint8 Port = 0 , Pin = 0;
	
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 248:	98 2f       	mov	r25, r24
 24a:	96 95       	lsr	r25
 24c:	96 95       	lsr	r25
 24e:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
 250:	87 70       	andi	r24, 0x07	; 7
	
	switch(Pin_value)
 252:	66 23       	and	r22, r22
 254:	09 f4       	brne	.+2      	; 0x258 <DIO_WriteChennel+0x10>
 256:	3f c0       	rjmp	.+126    	; 0x2d6 <DIO_WriteChennel+0x8e>
 258:	61 30       	cpi	r22, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <DIO_WriteChennel+0x16>
 25c:	7b c0       	rjmp	.+246    	; 0x354 <DIO_WriteChennel+0x10c>
	{
		case PIN_HIGH :
		
		switch(Port)
 25e:	91 30       	cpi	r25, 0x01	; 1
 260:	99 f0       	breq	.+38     	; 0x288 <DIO_WriteChennel+0x40>
 262:	28 f0       	brcs	.+10     	; 0x26e <DIO_WriteChennel+0x26>
 264:	92 30       	cpi	r25, 0x02	; 2
 266:	e9 f0       	breq	.+58     	; 0x2a2 <DIO_WriteChennel+0x5a>
 268:	93 30       	cpi	r25, 0x03	; 3
 26a:	41 f1       	breq	.+80     	; 0x2bc <DIO_WriteChennel+0x74>
 26c:	08 95       	ret
		{
		case 0:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 26e:	4b b3       	in	r20, 0x1b	; 27
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_WriteChennel+0x34>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_WriteChennel+0x30>
 280:	cb 01       	movw	r24, r22
 282:	84 2b       	or	r24, r20
 284:	8b bb       	out	0x1b, r24	; 27
		break;
 286:	08 95       	ret
		
		case 1:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 288:	48 b3       	in	r20, 0x18	; 24
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_WriteChennel+0x4e>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_WriteChennel+0x4a>
 29a:	cb 01       	movw	r24, r22
 29c:	84 2b       	or	r24, r20
 29e:	88 bb       	out	0x18, r24	; 24
		break;
 2a0:	08 95       	ret
		
		case 2:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 2a2:	45 b3       	in	r20, 0x15	; 21
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_WriteChennel+0x68>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_WriteChennel+0x64>
 2b4:	cb 01       	movw	r24, r22
 2b6:	84 2b       	or	r24, r20
 2b8:	85 bb       	out	0x15, r24	; 21
		break;
 2ba:	08 95       	ret
		
		case 3:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 2bc:	42 b3       	in	r20, 0x12	; 18
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_WriteChennel+0x82>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_WriteChennel+0x7e>
 2ce:	cb 01       	movw	r24, r22
 2d0:	84 2b       	or	r24, r20
 2d2:	82 bb       	out	0x12, r24	; 18
		break;
 2d4:	08 95       	ret
		}
		break;
		
		case PIN_LOW :
				
		switch(Port)
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	a1 f0       	breq	.+40     	; 0x302 <DIO_WriteChennel+0xba>
 2da:	28 f0       	brcs	.+10     	; 0x2e6 <DIO_WriteChennel+0x9e>
 2dc:	92 30       	cpi	r25, 0x02	; 2
 2de:	f9 f0       	breq	.+62     	; 0x31e <DIO_WriteChennel+0xd6>
 2e0:	93 30       	cpi	r25, 0x03	; 3
 2e2:	59 f1       	breq	.+86     	; 0x33a <DIO_WriteChennel+0xf2>
 2e4:	08 95       	ret
		{
			case 0:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 2e6:	4b b3       	in	r20, 0x1b	; 27
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	b9 01       	movw	r22, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_WriteChennel+0xac>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	8a 95       	dec	r24
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_WriteChennel+0xa8>
 2f8:	cb 01       	movw	r24, r22
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	8b bb       	out	0x1b, r24	; 27
			break;
 300:	08 95       	ret
			
			case 1:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 302:	48 b3       	in	r20, 0x18	; 24
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	b9 01       	movw	r22, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_WriteChennel+0xc8>
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_WriteChennel+0xc4>
 314:	cb 01       	movw	r24, r22
 316:	80 95       	com	r24
 318:	84 23       	and	r24, r20
 31a:	88 bb       	out	0x18, r24	; 24
			break;
 31c:	08 95       	ret
			
			case 2:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 31e:	45 b3       	in	r20, 0x15	; 21
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_WriteChennel+0xe4>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_WriteChennel+0xe0>
 330:	cb 01       	movw	r24, r22
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	85 bb       	out	0x15, r24	; 21
			break;
 338:	08 95       	ret
			
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 33a:	42 b3       	in	r20, 0x12	; 18
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_WriteChennel+0x100>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	8a 95       	dec	r24
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_WriteChennel+0xfc>
 34c:	cb 01       	movw	r24, r22
 34e:	80 95       	com	r24
 350:	84 23       	and	r24, r20
 352:	82 bb       	out	0x12, r24	; 18
 354:	08 95       	ret

00000356 <DIO_ReadChennel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_ReadChennel(uint8 Pin_Num , PIN_VALUE_t * Pin_value )
{
	uint8 Port = 0 , Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 356:	98 2f       	mov	r25, r24
 358:	96 95       	lsr	r25
 35a:	96 95       	lsr	r25
 35c:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
 35e:	87 70       	andi	r24, 0x07	; 7
	
	switch(Port)
 360:	91 30       	cpi	r25, 0x01	; 1
 362:	99 f0       	breq	.+38     	; 0x38a <DIO_ReadChennel+0x34>
 364:	28 f0       	brcs	.+10     	; 0x370 <DIO_ReadChennel+0x1a>
 366:	92 30       	cpi	r25, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <DIO_ReadChennel+0x4e>
 36a:	93 30       	cpi	r25, 0x03	; 3
 36c:	41 f1       	breq	.+80     	; 0x3be <DIO_ReadChennel+0x68>
 36e:	08 95       	ret
	{
	 case 0:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 370:	29 b3       	in	r18, 0x19	; 25
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	a9 01       	movw	r20, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_ReadChennel+0x26>
 378:	55 95       	asr	r21
 37a:	47 95       	ror	r20
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_ReadChennel+0x22>
 380:	ca 01       	movw	r24, r20
 382:	81 70       	andi	r24, 0x01	; 1
 384:	fb 01       	movw	r30, r22
 386:	80 83       	st	Z, r24
	 break;
 388:	08 95       	ret
	 
	 case 1:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 38a:	26 b3       	in	r18, 0x16	; 22
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	a9 01       	movw	r20, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_ReadChennel+0x40>
 392:	55 95       	asr	r21
 394:	47 95       	ror	r20
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_ReadChennel+0x3c>
 39a:	ca 01       	movw	r24, r20
 39c:	81 70       	andi	r24, 0x01	; 1
 39e:	fb 01       	movw	r30, r22
 3a0:	80 83       	st	Z, r24
	 break;
 3a2:	08 95       	ret
	 
	 case 2:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 3a4:	23 b3       	in	r18, 0x13	; 19
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	a9 01       	movw	r20, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_ReadChennel+0x5a>
 3ac:	55 95       	asr	r21
 3ae:	47 95       	ror	r20
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_ReadChennel+0x56>
 3b4:	ca 01       	movw	r24, r20
 3b6:	81 70       	andi	r24, 0x01	; 1
 3b8:	fb 01       	movw	r30, r22
 3ba:	80 83       	st	Z, r24
	 break;
 3bc:	08 95       	ret
	 
	 case 3:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 3be:	20 b3       	in	r18, 0x10	; 16
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	a9 01       	movw	r20, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_ReadChennel+0x74>
 3c6:	55 95       	asr	r21
 3c8:	47 95       	ror	r20
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_ReadChennel+0x70>
 3ce:	ca 01       	movw	r24, r20
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	fb 01       	movw	r30, r22
 3d4:	80 83       	st	Z, r24
 3d6:	08 95       	ret

000003d8 <DIO_FlipChennel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_FlipChennel(uint8 Pin_Num)
{
	uint8 Port = 0 , Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 3d8:	98 2f       	mov	r25, r24
 3da:	96 95       	lsr	r25
 3dc:	96 95       	lsr	r25
 3de:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
 3e0:	87 70       	andi	r24, 0x07	; 7
	
	switch(Port)
 3e2:	91 30       	cpi	r25, 0x01	; 1
 3e4:	99 f0       	breq	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <DIO_FlipChennel+0x1a>
 3e8:	92 30       	cpi	r25, 0x02	; 2
 3ea:	e9 f0       	breq	.+58     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3ec:	93 30       	cpi	r25, 0x03	; 3
 3ee:	41 f1       	breq	.+80     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3f0:	08 95       	ret
	{
		case 0:
		 Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 3f2:	4b b3       	in	r20, 0x1b	; 27
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_FlipChennel+0x24>
 404:	cb 01       	movw	r24, r22
 406:	84 27       	eor	r24, r20
 408:	8b bb       	out	0x1b, r24	; 27
		break;
 40a:	08 95       	ret
		
		case 1:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 40c:	48 b3       	in	r20, 0x18	; 24
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	b9 01       	movw	r22, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	cb 01       	movw	r24, r22
 420:	84 27       	eor	r24, r20
 422:	88 bb       	out	0x18, r24	; 24
		break;
 424:	08 95       	ret
		
		case 2:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 426:	45 b3       	in	r20, 0x15	; 21
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	84 27       	eor	r24, r20
 43c:	85 bb       	out	0x15, r24	; 21
		break;
 43e:	08 95       	ret
		
		case 3:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 440:	42 b3       	in	r20, 0x12	; 18
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	b9 01       	movw	r22, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	8a 95       	dec	r24
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	cb 01       	movw	r24, r22
 454:	84 27       	eor	r24, r20
 456:	82 bb       	out	0x12, r24	; 18
 458:	08 95       	ret

0000045a <DIO_WritePort>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WritePort(uint8 Pin_Num , uint8 Port_value )
{
	uint8 Port = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 45a:	86 95       	lsr	r24
 45c:	86 95       	lsr	r24
 45e:	86 95       	lsr	r24
	
	switch(Port)
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	41 f0       	breq	.+16     	; 0x474 <DIO_WritePort+0x1a>
 464:	28 f0       	brcs	.+10     	; 0x470 <DIO_WritePort+0x16>
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	39 f0       	breq	.+14     	; 0x478 <DIO_WritePort+0x1e>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	39 f0       	breq	.+14     	; 0x47c <DIO_WritePort+0x22>
 46e:	08 95       	ret
	{
		case 0:
		PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) = Port_value;
 470:	6b bb       	out	0x1b, r22	; 27
		break;
 472:	08 95       	ret
		
		case 1:
		PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) = Port_value;
 474:	68 bb       	out	0x18, r22	; 24
		break;
 476:	08 95       	ret
		
		case 2:
		PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) = Port_value;
 478:	65 bb       	out	0x15, r22	; 21
		break;
 47a:	08 95       	ret
		
		case 3:
		PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) = Port_value;
 47c:	62 bb       	out	0x12, r22	; 18
 47e:	08 95       	ret

00000480 <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	7e c0       	rjmp	.+252    	; 0x580 <PORT_Init+0x100>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 484:	e9 2f       	mov	r30, r25
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	e0 5a       	subi	r30, 0xA0	; 160
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	28 2f       	mov	r18, r24
 494:	26 95       	lsr	r18
 496:	26 95       	lsr	r18
 498:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS  ;
 49a:	87 70       	andi	r24, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR ;
 49c:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 49e:	33 23       	and	r19, r19
 4a0:	b9 f1       	breq	.+110    	; 0x510 <PORT_Init+0x90>
 4a2:	31 30       	cpi	r19, 0x01	; 1
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <PORT_Init+0x28>
 4a6:	6b c0       	rjmp	.+214    	; 0x57e <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			
			switch(Port)
 4a8:	21 30       	cpi	r18, 0x01	; 1
 4aa:	89 f0       	breq	.+34     	; 0x4ce <PORT_Init+0x4e>
 4ac:	28 f0       	brcs	.+10     	; 0x4b8 <PORT_Init+0x38>
 4ae:	22 30       	cpi	r18, 0x02	; 2
 4b0:	c9 f0       	breq	.+50     	; 0x4e4 <PORT_Init+0x64>
 4b2:	23 30       	cpi	r18, 0x03	; 3
 4b4:	11 f1       	breq	.+68     	; 0x4fa <PORT_Init+0x7a>
 4b6:	63 c0       	rjmp	.+198    	; 0x57e <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4b8:	4a b3       	in	r20, 0x1a	; 26
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <PORT_Init+0x44>
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <PORT_Init+0x40>
 4c8:	24 2b       	or	r18, r20
 4ca:	2a bb       	out	0x1a, r18	; 26

				break;
 4cc:	58 c0       	rjmp	.+176    	; 0x57e <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4ce:	47 b3       	in	r20, 0x17	; 23
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <PORT_Init+0x5a>
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <PORT_Init+0x56>
 4de:	24 2b       	or	r18, r20
 4e0:	27 bb       	out	0x17, r18	; 23
				
				break;
 4e2:	4d c0       	rjmp	.+154    	; 0x57e <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4e4:	44 b3       	in	r20, 0x14	; 20
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <PORT_Init+0x70>
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <PORT_Init+0x6c>
 4f4:	24 2b       	or	r18, r20
 4f6:	24 bb       	out	0x14, r18	; 20
				
				break;
 4f8:	42 c0       	rjmp	.+132    	; 0x57e <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4fa:	41 b3       	in	r20, 0x11	; 17
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <PORT_Init+0x86>
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <PORT_Init+0x82>
 50a:	24 2b       	or	r18, r20
 50c:	21 bb       	out	0x11, r18	; 17
				
				break;
 50e:	37 c0       	rjmp	.+110    	; 0x57e <PORT_Init+0xfe>
				break;
			}
			break;
			
			case PIN_INPUT :
			switch(Port)
 510:	21 30       	cpi	r18, 0x01	; 1
 512:	91 f0       	breq	.+36     	; 0x538 <PORT_Init+0xb8>
 514:	28 f0       	brcs	.+10     	; 0x520 <PORT_Init+0xa0>
 516:	22 30       	cpi	r18, 0x02	; 2
 518:	d9 f0       	breq	.+54     	; 0x550 <PORT_Init+0xd0>
 51a:	23 30       	cpi	r18, 0x03	; 3
 51c:	29 f1       	breq	.+74     	; 0x568 <PORT_Init+0xe8>
 51e:	2f c0       	rjmp	.+94     	; 0x57e <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 520:	4a b3       	in	r20, 0x1a	; 26
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <PORT_Init+0xac>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <PORT_Init+0xa8>
 530:	20 95       	com	r18
 532:	24 23       	and	r18, r20
 534:	2a bb       	out	0x1a, r18	; 26

				break;
 536:	23 c0       	rjmp	.+70     	; 0x57e <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 538:	47 b3       	in	r20, 0x17	; 23
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <PORT_Init+0xc4>
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <PORT_Init+0xc0>
 548:	20 95       	com	r18
 54a:	24 23       	and	r18, r20
 54c:	27 bb       	out	0x17, r18	; 23
				
				break;
 54e:	17 c0       	rjmp	.+46     	; 0x57e <PORT_Init+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 550:	44 b3       	in	r20, 0x14	; 20
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <PORT_Init+0xdc>
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	8a 95       	dec	r24
 55e:	e2 f7       	brpl	.-8      	; 0x558 <PORT_Init+0xd8>
 560:	20 95       	com	r18
 562:	24 23       	and	r18, r20
 564:	24 bb       	out	0x14, r18	; 20
				
				break;
 566:	0b c0       	rjmp	.+22     	; 0x57e <PORT_Init+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 568:	41 b3       	in	r20, 0x11	; 17
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <PORT_Init+0xf4>
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	8a 95       	dec	r24
 576:	e2 f7       	brpl	.-8      	; 0x570 <PORT_Init+0xf0>
 578:	20 95       	com	r18
 57a:	24 23       	and	r18, r20
 57c:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 57e:	9f 5f       	subi	r25, 0xFF	; 255
 580:	9f 30       	cpi	r25, 0x0F	; 15
 582:	08 f4       	brcc	.+2      	; 0x586 <PORT_Init+0x106>
 584:	7f cf       	rjmp	.-258    	; 0x484 <PORT_Init+0x4>
			
			default:
			break;
		}
	}
}
 586:	08 95       	ret

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
