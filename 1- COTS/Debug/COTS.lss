
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000648  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800068  00800068  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001121  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a37  00000000  00000000  00002453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b3  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bec  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_9>
  28:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_10>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BLUE>:
{
	LED_Toggle(LED_RED);
}
void GREEN(void)
{
	LED_Toggle(LED_GREEN);
  92:	82 e1       	ldi	r24, 0x12	; 18
  94:	0e 94 65 00 	call	0xca	; 0xca <LED_Toggle>
  98:	08 95       	ret

0000009a <RED>:
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	0e 94 65 00 	call	0xca	; 0xca <LED_Toggle>
  a0:	08 95       	ret

000000a2 <main>:
}
int main(void)
{
	PORT_Init();
  a2:	0e 94 1c 02 	call	0x438	; 0x438 <PORT_Init>

	IRQH_SetGloabINT(INT_ENABLE);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 a9 00 	call	0x152	; 0x152 <IRQH_SetGloabINT>
	
	IRQH_SetCallBack(Timer_Counter0_Overflow_VECTOR_INDEX,BLUE);
  ac:	69 e4       	ldi	r22, 0x49	; 73
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	0e 94 b5 00 	call	0x16a	; 0x16a <IRQH_SetCallBack>
	//IRQH_SetCallBack(Timer_Counter0_Compare_Match_VECTOR_INDEX,BLUE);
	//IRQH_SetCallBack(Timer_Counter1_Overflow_VECTOR_INDEX,RED);
	IRQH_SetCallBack(Timer_Counter1_Compare_Match_A_VECTOR_INDEX,RED);
  b6:	6d e4       	ldi	r22, 0x4D	; 77
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	0e 94 b5 00 	call	0x16a	; 0x16a <IRQH_SetCallBack>
	GPT_Init();
  c0:	0e 94 a0 02 	call	0x540	; 0x540 <GPT_Init>
	GPT_SetTime();
  c4:	0e 94 bf 02 	call	0x57e	; 0x57e <GPT_SetTime>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x26>

000000ca <LED_Toggle>:
*                                    E_NOT_OK
*******************************************************************************/

void LED_Toggle(uint8 LED_Num)
{
	DIO_FlipChennel(LED_Num);
  ca:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_FlipChennel>
  ce:	08 95       	ret

000000d0 <DIO_FlipChennel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_FlipChennel(uint8 Pin_Num)
{
	uint8 Port = 0 , Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
  d0:	98 2f       	mov	r25, r24
  d2:	96 95       	lsr	r25
  d4:	96 95       	lsr	r25
  d6:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
  d8:	87 70       	andi	r24, 0x07	; 7
	
	switch(Port)
  da:	91 30       	cpi	r25, 0x01	; 1
  dc:	99 f0       	breq	.+38     	; 0x104 <DIO_FlipChennel+0x34>
  de:	28 f0       	brcs	.+10     	; 0xea <DIO_FlipChennel+0x1a>
  e0:	92 30       	cpi	r25, 0x02	; 2
  e2:	e9 f0       	breq	.+58     	; 0x11e <DIO_FlipChennel+0x4e>
  e4:	93 30       	cpi	r25, 0x03	; 3
  e6:	41 f1       	breq	.+80     	; 0x138 <DIO_FlipChennel+0x68>
  e8:	08 95       	ret
	{
		case 0:
		 Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
  ea:	4b b3       	in	r20, 0x1b	; 27
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_FlipChennel+0x28>
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	8a 95       	dec	r24
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_FlipChennel+0x24>
  fc:	cb 01       	movw	r24, r22
  fe:	84 27       	eor	r24, r20
 100:	8b bb       	out	0x1b, r24	; 27
		break;
 102:	08 95       	ret
		
		case 1:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 104:	48 b3       	in	r20, 0x18	; 24
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_FlipChennel+0x42>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_FlipChennel+0x3e>
 116:	cb 01       	movw	r24, r22
 118:	84 27       	eor	r24, r20
 11a:	88 bb       	out	0x18, r24	; 24
		break;
 11c:	08 95       	ret
		
		case 2:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 11e:	45 b3       	in	r20, 0x15	; 21
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_FlipChennel+0x5c>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_FlipChennel+0x58>
 130:	cb 01       	movw	r24, r22
 132:	84 27       	eor	r24, r20
 134:	85 bb       	out	0x15, r24	; 21
		break;
 136:	08 95       	ret
		
		case 3:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 138:	42 b3       	in	r20, 0x12	; 18
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	b9 01       	movw	r22, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_FlipChennel+0x76>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_FlipChennel+0x72>
 14a:	cb 01       	movw	r24, r22
 14c:	84 27       	eor	r24, r20
 14e:	82 bb       	out	0x12, r24	; 18
 150:	08 95       	ret

00000152 <IRQH_SetGloabINT>:
	#elif (EXT_INT0_TRIGGER == EXT_INT_TRIGGER_ANY_LOGICAL_CHANGE )
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
	#elif (EXT_INT0_TRIGGER == EXT_INT_TRIGGER_FALLING_EDGE)
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
 152:	88 23       	and	r24, r24
 154:	31 f0       	breq	.+12     	; 0x162 <IRQH_SetGloabINT+0x10>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	39 f4       	brne	.+14     	; 0x168 <IRQH_SetGloabINT+0x16>
 15a:	8f b7       	in	r24, 0x3f	; 63
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8f bf       	out	0x3f, r24	; 63
 160:	08 95       	ret
 162:	8f b7       	in	r24, 0x3f	; 63
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	8f bf       	out	0x3f, r24	; 63
 168:	08 95       	ret

0000016a <IRQH_SetCallBack>:
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void IRQH_SetCallBack(uint8 Interrupt_Vector_Index , void(*p)(void))
{
	CallBack_PtrFunc[Interrupt_Vector_Index] = p ; 
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 59       	subi	r30, 0x90	; 144
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	71 83       	std	Z+1, r23	; 0x01
 178:	60 83       	st	Z, r22
 17a:	08 95       	ret

0000017c <__vector_1>:
}


ISR(INT0_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	if (CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX] != Null);
	{
		CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX]();
 19e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <CallBack_PtrFunc>
 1a2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <CallBack_PtrFunc+0x1>
 1a6:	09 95       	icall
	}
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_16>:
ISR(ADC_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	uint32 ADC_Digital_Value = ADC_input_16bit_access;
 1ec:	24 b1       	in	r18, 0x04	; 4
 1ee:	35 b1       	in	r19, 0x05	; 5
	ADC_Vin_Value= (ADC_Digital_Value *5000)/1023;
 1f0:	a8 e8       	ldi	r26, 0x88	; 136
 1f2:	b3 e1       	ldi	r27, 0x13	; 19
 1f4:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	33 e0       	ldi	r19, 0x03	; 3
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__udivmodsi4>
 204:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
 208:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <__data_end+0x1>
 20c:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__data_end+0x2>
 210:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <__data_end+0x3>
	if (CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX]!=Null)
 214:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <CallBack_PtrFunc+0x1e>
 218:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <CallBack_PtrFunc+0x1f>
 21c:	30 97       	sbiw	r30, 0x00	; 0
 21e:	09 f0       	breq	.+2      	; 0x222 <__vector_16+0x58>
	{
		(*CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX])();
 220:	09 95       	icall
	}
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 266:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <INT_CNT_1.1658>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <INT_CNT_1.1658>
	if (INT_CNT_1 == Timer0_Number_OVRflows_g)
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a0 e0       	ldi	r26, 0x00	; 0
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <Timer0_Number_OVRflows_g>
 27a:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <Timer0_Number_OVRflows_g+0x1>
 27e:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <Timer0_Number_OVRflows_g+0x2>
 282:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <Timer0_Number_OVRflows_g+0x3>
 286:	84 17       	cp	r24, r20
 288:	95 07       	cpc	r25, r21
 28a:	a6 07       	cpc	r26, r22
 28c:	b7 07       	cpc	r27, r23
 28e:	51 f4       	brne	.+20     	; 0x2a4 <__vector_11+0x60>
	{
		CallBack_PtrFunc[Timer_Counter0_Overflow_VECTOR_INDEX]();
 290:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <CallBack_PtrFunc+0x14>
 294:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <CallBack_PtrFunc+0x15>
 298:	09 95       	icall
		INT_CNT_1 = 0;
 29a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <INT_CNT_1.1658>
		TCNT0 = Timer0_Init_Value_g ;
 29e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Timer0_Init_Value_g>
 2a2:	82 bf       	out	0x32, r24	; 50
	}
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 2e8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <INT_CNT_1.1664>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <INT_CNT_1.1664>
	OCR0 = 255 ;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	8c bf       	out	0x3c, r24	; 60
	if (INT_CNT_1 == Timer0_Number_OVRflows_g)
 2f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <INT_CNT_1.1664>
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <Timer0_Number_OVRflows_g>
 304:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <Timer0_Number_OVRflows_g+0x1>
 308:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <Timer0_Number_OVRflows_g+0x2>
 30c:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <Timer0_Number_OVRflows_g+0x3>
 310:	84 17       	cp	r24, r20
 312:	95 07       	cpc	r25, r21
 314:	a6 07       	cpc	r26, r22
 316:	b7 07       	cpc	r27, r23
 318:	51 f4       	brne	.+20     	; 0x32e <__vector_10+0x68>
	{
		CallBack_PtrFunc[Timer_Counter0_Compare_Match_VECTOR_INDEX]();
 31a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <CallBack_PtrFunc+0x12>
 31e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <CallBack_PtrFunc+0x13>
 322:	09 95       	icall
		INT_CNT_1 = 0;
 324:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <INT_CNT_1.1664>
		OCR0 = Timer0_Init_Value_g ;
 328:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Timer0_Init_Value_g>
 32c:	8c bf       	out	0x3c, r24	; 60
	}
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 372:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <INT_CNT_1.1670>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <INT_CNT_1.1670>
	if (INT_CNT_1 == Timer1_Number_OVRflows_g)
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	a0 e0       	ldi	r26, 0x00	; 0
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <Timer1_Number_OVRflows_g>
 386:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <Timer1_Number_OVRflows_g+0x1>
 38a:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <Timer1_Number_OVRflows_g+0x2>
 38e:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <Timer1_Number_OVRflows_g+0x3>
 392:	84 17       	cp	r24, r20
 394:	95 07       	cpc	r25, r21
 396:	a6 07       	cpc	r26, r22
 398:	b7 07       	cpc	r27, r23
 39a:	69 f4       	brne	.+26     	; 0x3b6 <__vector_9+0x66>
	{
		CallBack_PtrFunc[Timer_Counter1_Overflow_VECTOR_INDEX]();
 39c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <CallBack_PtrFunc+0x10>
 3a0:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <CallBack_PtrFunc+0x11>
 3a4:	09 95       	icall
		INT_CNT_1 = 0;
 3a6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <INT_CNT_1.1670>
		TCNT1_16bit_access = Timer1_Init_Value_g ;
 3aa:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Timer1_Init_Value_g>
 3ae:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Timer1_Init_Value_g+0x1>
 3b2:	9d bd       	out	0x2d, r25	; 45
 3b4:	8c bd       	out	0x2c, r24	; 44
	}
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 3fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <INT_CNT_1.1676>
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <INT_CNT_1.1676>
	if (INT_CNT_1 == 1)
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	39 f4       	brne	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		(*CallBack_PtrFunc[Timer_Counter1_Compare_Match_A_VECTOR_INDEX])();
 408:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <CallBack_PtrFunc+0xc>
 40c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <CallBack_PtrFunc+0xd>
 410:	09 95       	icall
		INT_CNT_1 = 0;
 412:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <INT_CNT_1.1676>
	}
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	7e c0       	rjmp	.+252    	; 0x538 <PORT_Init+0x100>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 43c:	e9 2f       	mov	r30, r25
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	e0 5a       	subi	r30, 0xA0	; 160
 446:	ff 4f       	sbci	r31, 0xFF	; 255
 448:	80 81       	ld	r24, Z
 44a:	28 2f       	mov	r18, r24
 44c:	26 95       	lsr	r18
 44e:	26 95       	lsr	r18
 450:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS  ;
 452:	87 70       	andi	r24, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR ;
 454:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 456:	33 23       	and	r19, r19
 458:	b9 f1       	breq	.+110    	; 0x4c8 <PORT_Init+0x90>
 45a:	31 30       	cpi	r19, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <PORT_Init+0x28>
 45e:	6b c0       	rjmp	.+214    	; 0x536 <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			
			switch(Port)
 460:	21 30       	cpi	r18, 0x01	; 1
 462:	89 f0       	breq	.+34     	; 0x486 <PORT_Init+0x4e>
 464:	28 f0       	brcs	.+10     	; 0x470 <PORT_Init+0x38>
 466:	22 30       	cpi	r18, 0x02	; 2
 468:	c9 f0       	breq	.+50     	; 0x49c <PORT_Init+0x64>
 46a:	23 30       	cpi	r18, 0x03	; 3
 46c:	11 f1       	breq	.+68     	; 0x4b2 <PORT_Init+0x7a>
 46e:	63 c0       	rjmp	.+198    	; 0x536 <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 470:	4a b3       	in	r20, 0x1a	; 26
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <PORT_Init+0x44>
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <PORT_Init+0x40>
 480:	24 2b       	or	r18, r20
 482:	2a bb       	out	0x1a, r18	; 26

				break;
 484:	58 c0       	rjmp	.+176    	; 0x536 <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 486:	47 b3       	in	r20, 0x17	; 23
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <PORT_Init+0x5a>
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <PORT_Init+0x56>
 496:	24 2b       	or	r18, r20
 498:	27 bb       	out	0x17, r18	; 23
				
				break;
 49a:	4d c0       	rjmp	.+154    	; 0x536 <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 49c:	44 b3       	in	r20, 0x14	; 20
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <PORT_Init+0x70>
 4a4:	22 0f       	add	r18, r18
 4a6:	33 1f       	adc	r19, r19
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <PORT_Init+0x6c>
 4ac:	24 2b       	or	r18, r20
 4ae:	24 bb       	out	0x14, r18	; 20
				
				break;
 4b0:	42 c0       	rjmp	.+132    	; 0x536 <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4b2:	41 b3       	in	r20, 0x11	; 17
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <PORT_Init+0x86>
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <PORT_Init+0x82>
 4c2:	24 2b       	or	r18, r20
 4c4:	21 bb       	out	0x11, r18	; 17
				
				break;
 4c6:	37 c0       	rjmp	.+110    	; 0x536 <PORT_Init+0xfe>
				break;
			}
			break;
			
			case PIN_INPUT :
			switch(Port)
 4c8:	21 30       	cpi	r18, 0x01	; 1
 4ca:	91 f0       	breq	.+36     	; 0x4f0 <PORT_Init+0xb8>
 4cc:	28 f0       	brcs	.+10     	; 0x4d8 <PORT_Init+0xa0>
 4ce:	22 30       	cpi	r18, 0x02	; 2
 4d0:	d9 f0       	breq	.+54     	; 0x508 <PORT_Init+0xd0>
 4d2:	23 30       	cpi	r18, 0x03	; 3
 4d4:	29 f1       	breq	.+74     	; 0x520 <PORT_Init+0xe8>
 4d6:	2f c0       	rjmp	.+94     	; 0x536 <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4d8:	4a b3       	in	r20, 0x1a	; 26
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <PORT_Init+0xac>
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	8a 95       	dec	r24
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <PORT_Init+0xa8>
 4e8:	20 95       	com	r18
 4ea:	24 23       	and	r18, r20
 4ec:	2a bb       	out	0x1a, r18	; 26

				break;
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 4f0:	47 b3       	in	r20, 0x17	; 23
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <PORT_Init+0xc4>
 4f8:	22 0f       	add	r18, r18
 4fa:	33 1f       	adc	r19, r19
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <PORT_Init+0xc0>
 500:	20 95       	com	r18
 502:	24 23       	and	r18, r20
 504:	27 bb       	out	0x17, r18	; 23
				
				break;
 506:	17 c0       	rjmp	.+46     	; 0x536 <PORT_Init+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 508:	44 b3       	in	r20, 0x14	; 20
 50a:	21 e0       	ldi	r18, 0x01	; 1
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <PORT_Init+0xdc>
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	8a 95       	dec	r24
 516:	e2 f7       	brpl	.-8      	; 0x510 <PORT_Init+0xd8>
 518:	20 95       	com	r18
 51a:	24 23       	and	r18, r20
 51c:	24 bb       	out	0x14, r18	; 20
				
				break;
 51e:	0b c0       	rjmp	.+22     	; 0x536 <PORT_Init+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 520:	41 b3       	in	r20, 0x11	; 17
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <PORT_Init+0xf4>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <PORT_Init+0xf0>
 530:	20 95       	com	r18
 532:	24 23       	and	r18, r20
 534:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	94 30       	cpi	r25, 0x04	; 4
 53a:	08 f4       	brcc	.+2      	; 0x53e <PORT_Init+0x106>
 53c:	7f cf       	rjmp	.-258    	; 0x43c <PORT_Init+0x4>
			
			default:
			break;
		}
	}
}
 53e:	08 95       	ret

00000540 <GPT_Init>:

void GPT_Init(void)
{
	#if (Timer0_State == TIMER_ENABLE)
	#if (TIMER0_MODE == NORMAL_MODE )
	CLR_BIT(TCCR0,3);
 540:	83 b7       	in	r24, 0x33	; 51
 542:	87 7f       	andi	r24, 0xF7	; 247
 544:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	8f 7b       	andi	r24, 0xBF	; 191
 54a:	83 bf       	out	0x33, r24	; 51
	#if (TIMER0_INTERRUPT_STATE == INTERRUPT_ENABLED) //overflow int
	SET_BIT(TIMSK,0);
 54c:	89 b7       	in	r24, 0x39	; 57
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	89 bf       	out	0x39, r24	; 57
	#elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_64 		)
	TCCR0 |= 0X03;
	#elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_256 		)
	TCCR0 |= 0X04;
	#elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_1024)
	TCCR0 |= 0X05;
 552:	83 b7       	in	r24, 0x33	; 51
 554:	85 60       	ori	r24, 0x05	; 5
 556:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK,2);
	#elif (TIMER1_INTERRUPT_STATE == INTERRUPT_DISABLED)
	CLR_BIT(TIMSK,2);
	#endif //if (TIMER1_INTERRUPT_STATE)
	#elif (TIMER1_MODE == CTC_MODE )
	CLR_BIT(TCCR1A,0);
 558:	8f b5       	in	r24, 0x2f	; 47
 55a:	8e 7f       	andi	r24, 0xFE	; 254
 55c:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,1);
 55e:	8f b5       	in	r24, 0x2f	; 47
 560:	8d 7f       	andi	r24, 0xFD	; 253
 562:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 564:	8e b5       	in	r24, 0x2e	; 46
 566:	88 60       	ori	r24, 0x08	; 8
 568:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,4);
 56a:	8e b5       	in	r24, 0x2e	; 46
 56c:	8f 7e       	andi	r24, 0xEF	; 239
 56e:	8e bd       	out	0x2e, r24	; 46
	#if (TIMER1_INTERRUPT_STATE == INTERRUPT_ENABLED) //compare_match int
	SET_BIT(TIMSK,4);
 570:	89 b7       	in	r24, 0x39	; 57
 572:	80 61       	ori	r24, 0x10	; 16
 574:	89 bf       	out	0x39, r24	; 57
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_64 		)
	TCCR1B |= 0X03;
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_256 		)
	TCCR1B |= 0X04;
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_1024		)
	TCCR1B |= 0X05;
 576:	8e b5       	in	r24, 0x2e	; 46
 578:	85 60       	ori	r24, 0x05	; 5
 57a:	8e bd       	out	0x2e, r24	; 46
 57c:	08 95       	ret

0000057e <GPT_SetTime>:
	#if (Timer0_State == TIMER_ENABLE)
	uint8 Timer0_Tick_Time_us = TIMER0_PRESCALER / MCU_CLK_us ;
	#if (TIMER0_MODE == NORMAL_MODE )
	uint32 Time0_ms = TIMER0_COUNTED_MS;
	uint32 Timer0_Total_Ticks = (Time0_ms * 1000) / Timer0_Tick_Time_us;
	Timer0_Number_OVRflows_g = Timer0_Total_Ticks / 256 ;
 57e:	8d e3       	ldi	r24, 0x3D	; 61
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	a0 e0       	ldi	r26, 0x00	; 0
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <Timer0_Number_OVRflows_g>
 58a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <Timer0_Number_OVRflows_g+0x1>
 58e:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <Timer0_Number_OVRflows_g+0x2>
 592:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <Timer0_Number_OVRflows_g+0x3>
	Timer0_Init_Value_g = 256 - (Timer0_Total_Ticks % 256);
 596:	87 ef       	ldi	r24, 0xF7	; 247
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a0 e0       	ldi	r26, 0x00	; 0
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Timer0_Init_Value_g>
 5a2:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <Timer0_Init_Value_g+0x1>
 5a6:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <Timer0_Init_Value_g+0x2>
 5aa:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <Timer0_Init_Value_g+0x3>
	TCNT0 = Timer0_Init_Value_g ;
 5ae:	87 ef       	ldi	r24, 0xF7	; 247
 5b0:	82 bf       	out	0x32, r24	; 50
	if (Timer0_Total_Ticks % 256 != 0)
	{
		Timer0_Number_OVRflows_g++;
 5b2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <Timer0_Number_OVRflows_g>
 5b6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <Timer0_Number_OVRflows_g+0x1>
 5ba:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <Timer0_Number_OVRflows_g+0x2>
 5be:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <Timer0_Number_OVRflows_g+0x3>
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	a1 1d       	adc	r26, r1
 5c6:	b1 1d       	adc	r27, r1
 5c8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <Timer0_Number_OVRflows_g>
 5cc:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <Timer0_Number_OVRflows_g+0x1>
 5d0:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <Timer0_Number_OVRflows_g+0x2>
 5d4:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <Timer0_Number_OVRflows_g+0x3>
		Timer1_Number_OVRflows_g++;
	}
	#elif (TIMER1_MODE == CTC_MODE  )
	uint32 Time1_ms = TIMER1_COUNTED_MS;
	uint32 Timer1_Total_Ticks = (Time1_ms * 1000) / Timer1_Tick_Time_us;
	OCR1_16bit_access = Timer1_Total_Ticks -1 ;
 5d8:	88 e0       	ldi	r24, 0x08	; 8
 5da:	9d e3       	ldi	r25, 0x3D	; 61
 5dc:	9b bd       	out	0x2b, r25	; 43
 5de:	8a bd       	out	0x2a, r24	; 42
 5e0:	08 95       	ret

000005e2 <__udivmodsi4>:
 5e2:	a1 e2       	ldi	r26, 0x21	; 33
 5e4:	1a 2e       	mov	r1, r26
 5e6:	aa 1b       	sub	r26, r26
 5e8:	bb 1b       	sub	r27, r27
 5ea:	fd 01       	movw	r30, r26
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <__udivmodsi4_ep>

000005ee <__udivmodsi4_loop>:
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	ee 1f       	adc	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	a2 17       	cp	r26, r18
 5f8:	b3 07       	cpc	r27, r19
 5fa:	e4 07       	cpc	r30, r20
 5fc:	f5 07       	cpc	r31, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__udivmodsi4_ep>
 600:	a2 1b       	sub	r26, r18
 602:	b3 0b       	sbc	r27, r19
 604:	e4 0b       	sbc	r30, r20
 606:	f5 0b       	sbc	r31, r21

00000608 <__udivmodsi4_ep>:
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a 94       	dec	r1
 612:	69 f7       	brne	.-38     	; 0x5ee <__udivmodsi4_loop>
 614:	60 95       	com	r22
 616:	70 95       	com	r23
 618:	80 95       	com	r24
 61a:	90 95       	com	r25
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	bd 01       	movw	r22, r26
 622:	cf 01       	movw	r24, r30
 624:	08 95       	ret

00000626 <__umulhisi3>:
 626:	a2 9f       	mul	r26, r18
 628:	b0 01       	movw	r22, r0
 62a:	b3 9f       	mul	r27, r19
 62c:	c0 01       	movw	r24, r0
 62e:	a3 9f       	mul	r26, r19
 630:	70 0d       	add	r23, r0
 632:	81 1d       	adc	r24, r1
 634:	11 24       	eor	r1, r1
 636:	91 1d       	adc	r25, r1
 638:	b2 9f       	mul	r27, r18
 63a:	70 0d       	add	r23, r0
 63c:	81 1d       	adc	r24, r1
 63e:	11 24       	eor	r1, r1
 640:	91 1d       	adc	r25, r1
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
