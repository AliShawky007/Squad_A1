
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000050e  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012bf  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab4  00000000  00000000  000019d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae3  00000000  00000000  0000248b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000568  00000000  00000000  000030dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9b  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000040df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
   PORT_INIT();
   LCD_INIT();
   LCD_write_char('A');*/
	uint8 val=0;
	uint8 R=0;
   PORT_INIT();
  82:	0e 94 01 02 	call	0x402	; 0x402 <PORT_INIT>
   uint8 VAL=0;
  86:	d0 e0       	ldi	r29, 0x00	; 0
   uint8 CNT=0;
   
    while (1) 
    {
	   SEG_SETVALUE(VAL);
  88:	8d 2f       	mov	r24, r29
  8a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
		val=BTN_GET(Button_0);
  8e:	8a e1       	ldi	r24, 0x1A	; 26
  90:	0e 94 c0 00 	call	0x180	; 0x180 <BTN_GET>
		if(val==0)
  94:	81 11       	cpse	r24, r1
  96:	10 c0       	rjmp	.+32     	; 0xb8 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2a ea       	ldi	r18, 0xAA	; 170
  9a:	36 ee       	ldi	r19, 0xE6	; 230
  9c:	86 e9       	ldi	r24, 0x96	; 150
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x1e>
  aa:	00 00       	nop
		{
			_delay_ms(10000);
			
			SEG_SETVALUE(VAL++);
  ac:	c1 e0       	ldi	r28, 0x01	; 1
  ae:	cd 0f       	add	r28, r29
  b0:	8d 2f       	mov	r24, r29
  b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
  b6:	dc 2f       	mov	r29, r28
			
		}
		R=BTN_GET(Button_1);
  b8:	8b e1       	ldi	r24, 0x1B	; 27
  ba:	0e 94 c0 00 	call	0x180	; 0x180 <BTN_GET>
		if(R==0)
  be:	81 11       	cpse	r24, r1
  c0:	13 c0       	rjmp	.+38     	; 0xe8 <main+0x66>
		{
			if(VAL==6)
  c2:	d6 30       	cpi	r29, 0x06	; 6
  c4:	89 f4       	brne	.+34     	; 0xe8 <main+0x66>
			{
				SEG_SETVALUE(VAL+=10);
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	8d 0f       	add	r24, r29
  ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	33 ed       	ldi	r19, 0xD3	; 211
  d2:	80 e3       	ldi	r24, 0x30	; 48
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x52>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5c>
  de:	00 00       	nop
				_delay_ms(1000);
				SEG_SETVALUE(VAL-=6);
  e0:	dc 5f       	subi	r29, 0xFC	; 252
  e2:	8d 2f       	mov	r24, r29
  e4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
			}
			

		}
	    int n=BTN_GET(Button_2);
  e8:	8c e1       	ldi	r24, 0x1C	; 28
  ea:	0e 94 c0 00 	call	0x180	; 0x180 <BTN_GET>
		if(n==0)
  ee:	81 11       	cpse	r24, r1
  f0:	cb cf       	rjmp	.-106    	; 0x88 <main+0x6>
		{
			
			for(CNT=VAL-1;CNT>=0;CNT--)
  f2:	cf ef       	ldi	r28, 0xFF	; 255
  f4:	cd 0f       	add	r28, r29
  f6:	9a ea       	ldi	r25, 0xAA	; 170
  f8:	26 ee       	ldi	r18, 0xE6	; 230
  fa:	36 e9       	ldi	r19, 0x96	; 150
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	91 50       	subi	r25, 0x01	; 1
 100:	20 40       	sbci	r18, 0x00	; 0
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x7c>
 108:	00 00       	nop
			{
				_delay_ms(10000);
				SEG_SETVALUE(CNT);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	23 ed       	ldi	r18, 0xD3	; 211
 114:	30 e3       	ldi	r19, 0x30	; 48
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x94>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x9e>
 120:	00 00       	nop
				_delay_ms(1000);
				if(CNT>10)
 122:	cb 30       	cpi	r28, 0x0B	; 11
 124:	b8 f0       	brcs	.+46     	; 0x154 <main+0xd2>
 126:	8a ea       	ldi	r24, 0xAA	; 170
 128:	96 ee       	ldi	r25, 0xE6	; 230
 12a:	26 e9       	ldi	r18, 0x96	; 150
 12c:	31 e0       	ldi	r19, 0x01	; 1
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	d9 f7       	brne	.-10     	; 0x12e <main+0xac>
 138:	00 00       	nop
				{
					_delay_ms(10000);
					SEG_SETVALUE(CNT-=5);
 13a:	c5 50       	subi	r28, 0x05	; 5
 13c:	8c 2f       	mov	r24, r28
 13e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_SETVALUE>
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	93 ed       	ldi	r25, 0xD3	; 211
 146:	20 e3       	ldi	r18, 0x30	; 48
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xc6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xd0>
 152:	00 00       	nop
					_delay_ms(1000);
					
				}
				
				if(CNT==0)
 154:	c1 11       	cpse	r28, r1
 156:	12 c0       	rjmp	.+36     	; 0x17c <main+0xfa>
				{
					BUZ_SETVALUE(BUZZER_0,1);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	85 e1       	ldi	r24, 0x15	; 21
 15c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <BUZ_SETVALUE>
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	89 e6       	ldi	r24, 0x69	; 105
 164:	98 e1       	ldi	r25, 0x18	; 24
 166:	31 50       	subi	r19, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xe4>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xee>
 170:	00 00       	nop
					_delay_ms(500);
					BUZ_SETVALUE(BUZZER_0,0);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	85 e1       	ldi	r24, 0x15	; 21
 176:	0e 94 e7 00 	call	0x1ce	; 0x1ce <BUZ_SETVALUE>
					break;
 17a:	86 cf       	rjmp	.-244    	; 0x88 <main+0x6>
		}
	    int n=BTN_GET(Button_2);
		if(n==0)
		{
			
			for(CNT=VAL-1;CNT>=0;CNT--)
 17c:	c1 50       	subi	r28, 0x01	; 1
					_delay_ms(500);
					BUZ_SETVALUE(BUZZER_0,0);
					break;
				}
				
			}
 17e:	bb cf       	rjmp	.-138    	; 0xf6 <main+0x74>

00000180 <BTN_GET>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 BTN_GET(uint8 Button_num)
{
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <BTN_GET+0x8>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	18 2f       	mov	r17, r24
	uint8 button=1,temp=0;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	1a 82       	std	Y+2, r1	; 0x02
	DIO_READCHANNEL(Button_num,&button);
 194:	be 01       	movw	r22, r28
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	81 2f       	mov	r24, r17
 19c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_READCHANNEL>
	
	while(temp==0)
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <BTN_GET+0x2e>
	{
		DIO_READCHANNEL(Button_num,&temp);
 1a2:	be 01       	movw	r22, r28
 1a4:	6e 5f       	subi	r22, 0xFE	; 254
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	81 2f       	mov	r24, r17
 1aa:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_READCHANNEL>
uint8 BTN_GET(uint8 Button_num)
{
	uint8 button=1,temp=0;
	DIO_READCHANNEL(Button_num,&button);
	
	while(temp==0)
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	88 23       	and	r24, r24
 1b2:	b9 f3       	breq	.-18     	; 0x1a2 <BTN_GET+0x22>
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	9c e9       	ldi	r25, 0x9C	; 156
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <BTN_GET+0x38>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <BTN_GET+0x3e>
 1be:	00 00       	nop
	{
		DIO_READCHANNEL(Button_num,&temp);
	}
	_delay_ms(10);
	return button;
}
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <BUZ_SETVALUE>:
*                                    E_NOT_OK                                  
*******************************************************************************/

void BUZ_SETVALUE(uint8 BUZ_NUM, uint8 BUZ_VALUE)
{
	DIO_WRITECHANNEL(BUZ_NUM,BUZ_VALUE);
 1ce:	0e 94 29 01 	call	0x252	; 0x252 <DIO_WRITECHANNEL>
 1d2:	08 95       	ret

000001d4 <SEG_SETVALUE>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void SEG_SETVALUE(uint8 NUM)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	d8 2f       	mov	r29, r24
	DIO_WRITECHANNEL(SEVEN_SEG_1,SEG_HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	87 e1       	ldi	r24, 0x17	; 23
 1de:	0e 94 29 01 	call	0x252	; 0x252 <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(SEVEN_SEG_0,SEG_LOW);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	86 e1       	ldi	r24, 0x16	; 22
 1e6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_WRITECHANNEL>
	
	DIO_WRITEPORT(SEVEN_SEG_PORT,seven_seg[NUM / 10]);
 1ea:	cd ec       	ldi	r28, 0xCD	; 205
 1ec:	dc 9f       	mul	r29, r28
 1ee:	c1 2d       	mov	r28, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	c6 95       	lsr	r28
 1f4:	c6 95       	lsr	r28
 1f6:	c6 95       	lsr	r28
 1f8:	ec 2f       	mov	r30, r28
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e0 5a       	subi	r30, 0xA0	; 160
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	60 81       	ld	r22, Z
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_WRITEPORT>
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9c e9       	ldi	r25, 0x9C	; 156
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <SEG_SETVALUE+0x38>
 210:	00 c0       	rjmp	.+0      	; 0x212 <SEG_SETVALUE+0x3e>
 212:	00 00       	nop
	_delay_ms(10);
	DIO_WRITECHANNEL(SEVEN_SEG_1,SEG_LOW);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	87 e1       	ldi	r24, 0x17	; 23
 218:	0e 94 29 01 	call	0x252	; 0x252 <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(SEVEN_SEG_0,SEG_HIGH);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	86 e1       	ldi	r24, 0x16	; 22
 220:	0e 94 29 01 	call	0x252	; 0x252 <DIO_WRITECHANNEL>
	
	DIO_WRITEPORT(SEVEN_SEG_PORT,seven_seg[NUM % 10]);
 224:	cc 0f       	add	r28, r28
 226:	8c 2f       	mov	r24, r28
 228:	88 0f       	add	r24, r24
 22a:	88 0f       	add	r24, r24
 22c:	c8 0f       	add	r28, r24
 22e:	dc 1b       	sub	r29, r28
 230:	ed 2f       	mov	r30, r29
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e0 5a       	subi	r30, 0xA0	; 160
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	60 81       	ld	r22, Z
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_WRITEPORT>
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9c e9       	ldi	r25, 0x9C	; 156
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <SEG_SETVALUE+0x70>
 248:	00 c0       	rjmp	.+0      	; 0x24a <SEG_SETVALUE+0x76>
 24a:	00 00       	nop
	_delay_ms(10);
	
	
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <DIO_WRITECHANNEL>:
		break;
		case 2:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
		break;
		case 3:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 252:	98 2f       	mov	r25, r24
 254:	96 95       	lsr	r25
 256:	96 95       	lsr	r25
 258:	96 95       	lsr	r25
 25a:	87 70       	andi	r24, 0x07	; 7
 25c:	66 23       	and	r22, r22
 25e:	09 f4       	brne	.+2      	; 0x262 <DIO_WRITECHANNEL+0x10>
 260:	3f c0       	rjmp	.+126    	; 0x2e0 <DIO_WRITECHANNEL+0x8e>
 262:	61 30       	cpi	r22, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <DIO_WRITECHANNEL+0x16>
 266:	7b c0       	rjmp	.+246    	; 0x35e <DIO_WRITECHANNEL+0x10c>
 268:	91 30       	cpi	r25, 0x01	; 1
 26a:	99 f0       	breq	.+38     	; 0x292 <DIO_WRITECHANNEL+0x40>
 26c:	28 f0       	brcs	.+10     	; 0x278 <DIO_WRITECHANNEL+0x26>
 26e:	92 30       	cpi	r25, 0x02	; 2
 270:	e9 f0       	breq	.+58     	; 0x2ac <DIO_WRITECHANNEL+0x5a>
 272:	93 30       	cpi	r25, 0x03	; 3
 274:	41 f1       	breq	.+80     	; 0x2c6 <DIO_WRITECHANNEL+0x74>
 276:	08 95       	ret
 278:	4b b3       	in	r20, 0x1b	; 27
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	b9 01       	movw	r22, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_WRITECHANNEL+0x34>
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	8a 95       	dec	r24
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_WRITECHANNEL+0x30>
 28a:	cb 01       	movw	r24, r22
 28c:	84 2b       	or	r24, r20
 28e:	8b bb       	out	0x1b, r24	; 27
 290:	08 95       	ret
 292:	48 b3       	in	r20, 0x18	; 24
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WRITECHANNEL+0x4e>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	8a 95       	dec	r24
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WRITECHANNEL+0x4a>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	08 95       	ret
 2ac:	45 b3       	in	r20, 0x15	; 21
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	b9 01       	movw	r22, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_WRITECHANNEL+0x68>
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_WRITECHANNEL+0x64>
 2be:	cb 01       	movw	r24, r22
 2c0:	84 2b       	or	r24, r20
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	08 95       	ret
 2c6:	42 b3       	in	r20, 0x12	; 18
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_WRITECHANNEL+0x82>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_WRITECHANNEL+0x7e>
 2d8:	cb 01       	movw	r24, r22
 2da:	84 2b       	or	r24, r20
 2dc:	82 bb       	out	0x12, r24	; 18
 2de:	08 95       	ret
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	a1 f0       	breq	.+40     	; 0x30c <DIO_WRITECHANNEL+0xba>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <DIO_WRITECHANNEL+0x9e>
 2e6:	92 30       	cpi	r25, 0x02	; 2
 2e8:	f9 f0       	breq	.+62     	; 0x328 <DIO_WRITECHANNEL+0xd6>
 2ea:	93 30       	cpi	r25, 0x03	; 3
 2ec:	59 f1       	breq	.+86     	; 0x344 <DIO_WRITECHANNEL+0xf2>
 2ee:	08 95       	ret
 2f0:	4b b3       	in	r20, 0x1b	; 27
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_WRITECHANNEL+0xac>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_WRITECHANNEL+0xa8>
 302:	cb 01       	movw	r24, r22
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8b bb       	out	0x1b, r24	; 27
 30a:	08 95       	ret
 30c:	48 b3       	in	r20, 0x18	; 24
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_WRITECHANNEL+0xc8>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_WRITECHANNEL+0xc4>
 31e:	cb 01       	movw	r24, r22
 320:	80 95       	com	r24
 322:	84 23       	and	r24, r20
 324:	88 bb       	out	0x18, r24	; 24
 326:	08 95       	ret
 328:	45 b3       	in	r20, 0x15	; 21
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	b9 01       	movw	r22, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_WRITECHANNEL+0xe4>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	8a 95       	dec	r24
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_WRITECHANNEL+0xe0>
 33a:	cb 01       	movw	r24, r22
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret
 344:	42 b3       	in	r20, 0x12	; 18
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_WRITECHANNEL+0x100>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_WRITECHANNEL+0xfc>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	82 bb       	out	0x12, r24	; 18
 35e:	08 95       	ret

00000360 <DIO_READCHANNEL>:
 360:	98 2f       	mov	r25, r24
 362:	96 95       	lsr	r25
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	87 70       	andi	r24, 0x07	; 7
 36a:	91 30       	cpi	r25, 0x01	; 1
 36c:	99 f0       	breq	.+38     	; 0x394 <DIO_READCHANNEL+0x34>
 36e:	28 f0       	brcs	.+10     	; 0x37a <DIO_READCHANNEL+0x1a>
 370:	92 30       	cpi	r25, 0x02	; 2
 372:	e9 f0       	breq	.+58     	; 0x3ae <DIO_READCHANNEL+0x4e>
 374:	93 30       	cpi	r25, 0x03	; 3
 376:	41 f1       	breq	.+80     	; 0x3c8 <DIO_READCHANNEL+0x68>
 378:	08 95       	ret
 37a:	29 b3       	in	r18, 0x19	; 25
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	a9 01       	movw	r20, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_READCHANNEL+0x26>
 382:	55 95       	asr	r21
 384:	47 95       	ror	r20
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_READCHANNEL+0x22>
 38a:	ca 01       	movw	r24, r20
 38c:	81 70       	andi	r24, 0x01	; 1
 38e:	fb 01       	movw	r30, r22
 390:	80 83       	st	Z, r24
 392:	08 95       	ret
 394:	26 b3       	in	r18, 0x16	; 22
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	a9 01       	movw	r20, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_READCHANNEL+0x40>
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_READCHANNEL+0x3c>
 3a4:	ca 01       	movw	r24, r20
 3a6:	81 70       	andi	r24, 0x01	; 1
 3a8:	fb 01       	movw	r30, r22
 3aa:	80 83       	st	Z, r24
 3ac:	08 95       	ret
 3ae:	23 b3       	in	r18, 0x13	; 19
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_READCHANNEL+0x5a>
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_READCHANNEL+0x56>
 3be:	ca 01       	movw	r24, r20
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	fb 01       	movw	r30, r22
 3c4:	80 83       	st	Z, r24
 3c6:	08 95       	ret
 3c8:	20 b3       	in	r18, 0x10	; 16
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	a9 01       	movw	r20, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_READCHANNEL+0x74>
 3d0:	55 95       	asr	r21
 3d2:	47 95       	ror	r20
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_READCHANNEL+0x70>
 3d8:	ca 01       	movw	r24, r20
 3da:	81 70       	andi	r24, 0x01	; 1
 3dc:	fb 01       	movw	r30, r22
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <DIO_WRITEPORT>:
*******************************************************************************/
void DIO_WRITEPORT(PORT_NUM_T PORT,uint8 PORT_value)
{
	
	//Port=pin_NUM/(NUMBER_OF_EACH_PORT_PINSS);
	switch(PORT){
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <DIO_WRITEPORT+0x14>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <DIO_WRITEPORT+0x10>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	39 f0       	breq	.+14     	; 0x3fa <DIO_WRITEPORT+0x18>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	39 f0       	breq	.+14     	; 0x3fe <DIO_WRITEPORT+0x1c>
 3f0:	08 95       	ret
		case 0:
		PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT)=PORT_value;
 3f2:	6b bb       	out	0x1b, r22	; 27
		break;
 3f4:	08 95       	ret
		case 1:
		PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT)=PORT_value;
 3f6:	68 bb       	out	0x18, r22	; 24
		break;
 3f8:	08 95       	ret
		case 2:
		PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT)=PORT_value;
 3fa:	65 bb       	out	0x15, r22	; 21
		break;
 3fc:	08 95       	ret
		case 3:
		PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS+GPIO_OUTPUT_REGISTER_PORT)=PORT_value;
 3fe:	62 bb       	out	0x12, r22	; 18
 400:	08 95       	ret

00000402 <PORT_INIT>:
*                                    E_NOT_OK
*******************************************************************************/
void PORT_INIT(void)
{
	uint8  cnt=0, port=0,pin=0,Dir=0;
	for(cnt=0;cnt<DEFINED_PINS;cnt++)
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	7e c0       	rjmp	.+252    	; 0x502 <PORT_INIT+0x100>
	{
		port=PORT_Initialization[cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINSS ;
 406:	e9 2f       	mov	r30, r25
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	e6 59       	subi	r30, 0x96	; 150
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	80 81       	ld	r24, Z
 414:	38 2f       	mov	r19, r24
 416:	36 95       	lsr	r19
 418:	36 95       	lsr	r19
 41a:	36 95       	lsr	r19
		pin=PORT_Initialization[cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINSS ;
 41c:	87 70       	andi	r24, 0x07	; 7
		Dir=PORT_Initialization[cnt].PIN_DIR;
 41e:	21 81       	ldd	r18, Z+1	; 0x01
		
		switch(Dir)
 420:	22 23       	and	r18, r18
 422:	b9 f1       	breq	.+110    	; 0x492 <PORT_INIT+0x90>
 424:	21 30       	cpi	r18, 0x01	; 1
 426:	09 f0       	breq	.+2      	; 0x42a <PORT_INIT+0x28>
 428:	6b c0       	rjmp	.+214    	; 0x500 <PORT_INIT+0xfe>
		{
			case PIN_OUTPUT:
			
			switch(port)
 42a:	31 30       	cpi	r19, 0x01	; 1
 42c:	89 f0       	breq	.+34     	; 0x450 <PORT_INIT+0x4e>
 42e:	28 f0       	brcs	.+10     	; 0x43a <PORT_INIT+0x38>
 430:	32 30       	cpi	r19, 0x02	; 2
 432:	c9 f0       	breq	.+50     	; 0x466 <PORT_INIT+0x64>
 434:	33 30       	cpi	r19, 0x03	; 3
 436:	11 f1       	breq	.+68     	; 0x47c <PORT_INIT+0x7a>
 438:	63 c0       	rjmp	.+198    	; 0x500 <PORT_INIT+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 43a:	4a b3       	in	r20, 0x1a	; 26
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <PORT_INIT+0x44>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <PORT_INIT+0x40>
 44a:	24 2b       	or	r18, r20
 44c:	2a bb       	out	0x1a, r18	; 26
				
				break;
 44e:	58 c0       	rjmp	.+176    	; 0x500 <PORT_INIT+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 450:	47 b3       	in	r20, 0x17	; 23
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <PORT_INIT+0x5a>
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <PORT_INIT+0x56>
 460:	24 2b       	or	r18, r20
 462:	27 bb       	out	0x17, r18	; 23
				break;
 464:	4d c0       	rjmp	.+154    	; 0x500 <PORT_INIT+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 466:	44 b3       	in	r20, 0x14	; 20
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <PORT_INIT+0x70>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <PORT_INIT+0x6c>
 476:	24 2b       	or	r18, r20
 478:	24 bb       	out	0x14, r18	; 20
				break;
 47a:	42 c0       	rjmp	.+132    	; 0x500 <PORT_INIT+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 47c:	41 b3       	in	r20, 0x11	; 17
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <PORT_INIT+0x86>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <PORT_INIT+0x82>
 48c:	24 2b       	or	r18, r20
 48e:	21 bb       	out	0x11, r18	; 17
				break;
 490:	37 c0       	rjmp	.+110    	; 0x500 <PORT_INIT+0xfe>
			}
			break;
			
			case PIN_INPUT:
			
			switch(pin)
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	91 f0       	breq	.+36     	; 0x4ba <PORT_INIT+0xb8>
 496:	28 f0       	brcs	.+10     	; 0x4a2 <PORT_INIT+0xa0>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	d9 f0       	breq	.+54     	; 0x4d2 <PORT_INIT+0xd0>
 49c:	83 30       	cpi	r24, 0x03	; 3
 49e:	29 f1       	breq	.+74     	; 0x4ea <PORT_INIT+0xe8>
 4a0:	2f c0       	rjmp	.+94     	; 0x500 <PORT_INIT+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 4a2:	4a b3       	in	r20, 0x1a	; 26
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <PORT_INIT+0xac>
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <PORT_INIT+0xa8>
 4b2:	20 95       	com	r18
 4b4:	24 23       	and	r18, r20
 4b6:	2a bb       	out	0x1a, r18	; 26
				
				break;
 4b8:	23 c0       	rjmp	.+70     	; 0x500 <PORT_INIT+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 4ba:	47 b3       	in	r20, 0x17	; 23
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <PORT_INIT+0xc4>
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <PORT_INIT+0xc0>
 4ca:	20 95       	com	r18
 4cc:	24 23       	and	r18, r20
 4ce:	27 bb       	out	0x17, r18	; 23
				break;
 4d0:	17 c0       	rjmp	.+46     	; 0x500 <PORT_INIT+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 4d2:	44 b3       	in	r20, 0x14	; 20
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <PORT_INIT+0xdc>
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <PORT_INIT+0xd8>
 4e2:	20 95       	com	r18
 4e4:	24 23       	and	r18, r20
 4e6:	24 bb       	out	0x14, r18	; 20
				break;
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <PORT_INIT+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS+GPIO_DIRCETION_REGISTER_DDR),pin);
 4ea:	41 b3       	in	r20, 0x11	; 17
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <PORT_INIT+0xf4>
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <PORT_INIT+0xf0>
 4fa:	20 95       	com	r18
 4fc:	24 23       	and	r18, r20
 4fe:	21 bb       	out	0x11, r18	; 17
*                                    E_NOT_OK
*******************************************************************************/
void PORT_INIT(void)
{
	uint8  cnt=0, port=0,pin=0,Dir=0;
	for(cnt=0;cnt<DEFINED_PINS;cnt++)
 500:	9f 5f       	subi	r25, 0xFF	; 255
 502:	97 30       	cpi	r25, 0x07	; 7
 504:	08 f4       	brcc	.+2      	; 0x508 <PORT_INIT+0x106>
 506:	7f cf       	rjmp	.-258    	; 0x406 <PORT_INIT+0x4>
			default:
			
			break;
		}
	}
}
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
