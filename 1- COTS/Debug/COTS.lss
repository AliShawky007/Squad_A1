
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf3  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000912  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000745  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000519  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f9  00000000  00000000  00002841  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
  uint8 val = 0;
  
  PORT_Init();
  82:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <PORT_Init>

    while (1) 
    {
		val = BTN_GetValue(Button_0);
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	0e 94 4c 00 	call	0x98	; 0x98 <BTN_GetValue>
		
		if(val == 0)
  8c:	81 11       	cpse	r24, r1
  8e:	fb cf       	rjmp	.-10     	; 0x86 <main+0x4>
		{
			LED_Toggle(LED_GREEN);
  90:	81 e1       	ldi	r24, 0x11	; 17
  92:	0e 94 73 00 	call	0xe6	; 0xe6 <LED_Toggle>
  96:	f7 cf       	rjmp	.-18     	; 0x86 <main+0x4>

00000098 <BTN_GetValue>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 BTN_GetValue(uint8 Button_num)
{
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	00 d0       	rcall	.+0      	; 0xa0 <BTN_GetValue+0x8>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	18 2f       	mov	r17, r24
	uint8 button = 1, temp = 0;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	1a 82       	std	Y+2, r1	; 0x02
	
	DIO_ReadChennel(Button_num , &button);
  ac:	be 01       	movw	r22, r28
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	81 2f       	mov	r24, r17
  b4:	0e 94 76 00 	call	0xec	; 0xec <DIO_ReadChennel>
	
	while(temp == 0)
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <BTN_GetValue+0x2e>
	{
		DIO_ReadChennel(Button_num , &temp);
  ba:	be 01       	movw	r22, r28
  bc:	6e 5f       	subi	r22, 0xFE	; 254
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	81 2f       	mov	r24, r17
  c2:	0e 94 76 00 	call	0xec	; 0xec <DIO_ReadChennel>
{
	uint8 button = 1, temp = 0;
	
	DIO_ReadChennel(Button_num , &button);
	
	while(temp == 0)
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	88 23       	and	r24, r24
  ca:	b9 f3       	breq	.-18     	; 0xba <BTN_GetValue+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <BTN_GetValue+0x38>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <BTN_GetValue+0x3e>
  d6:	00 00       	nop
		DIO_ReadChennel(Button_num , &temp);
	}
	_delay_ms(10);
	
	return button;
}
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

000000e6 <LED_Toggle>:
*                                    E_NOT_OK
*******************************************************************************/

void LED_Toggle(uint8 LED_Num)
{
	DIO_FlipChennel(LED_Num);
  e6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_FlipChennel>
  ea:	08 95       	ret

000000ec <DIO_ReadChennel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_ReadChennel(uint8 Pin_Num , PIN_VALUE_t * Pin_value )
{
	uint8 Port = 0 , Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
  ec:	98 2f       	mov	r25, r24
  ee:	96 95       	lsr	r25
  f0:	96 95       	lsr	r25
  f2:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
  f4:	87 70       	andi	r24, 0x07	; 7
	
	switch(Port)
  f6:	91 30       	cpi	r25, 0x01	; 1
  f8:	99 f0       	breq	.+38     	; 0x120 <DIO_ReadChennel+0x34>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_ReadChennel+0x1a>
  fc:	92 30       	cpi	r25, 0x02	; 2
  fe:	e9 f0       	breq	.+58     	; 0x13a <DIO_ReadChennel+0x4e>
 100:	93 30       	cpi	r25, 0x03	; 3
 102:	41 f1       	breq	.+80     	; 0x154 <DIO_ReadChennel+0x68>
 104:	08 95       	ret
	{
	 case 0:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 106:	29 b3       	in	r18, 0x19	; 25
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	a9 01       	movw	r20, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_ReadChennel+0x26>
 10e:	55 95       	asr	r21
 110:	47 95       	ror	r20
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_ReadChennel+0x22>
 116:	ca 01       	movw	r24, r20
 118:	81 70       	andi	r24, 0x01	; 1
 11a:	fb 01       	movw	r30, r22
 11c:	80 83       	st	Z, r24
	 break;
 11e:	08 95       	ret
	 
	 case 1:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 120:	26 b3       	in	r18, 0x16	; 22
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	a9 01       	movw	r20, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_ReadChennel+0x40>
 128:	55 95       	asr	r21
 12a:	47 95       	ror	r20
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_ReadChennel+0x3c>
 130:	ca 01       	movw	r24, r20
 132:	81 70       	andi	r24, 0x01	; 1
 134:	fb 01       	movw	r30, r22
 136:	80 83       	st	Z, r24
	 break;
 138:	08 95       	ret
	 
	 case 2:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 13a:	23 b3       	in	r18, 0x13	; 19
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	a9 01       	movw	r20, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_ReadChennel+0x5a>
 142:	55 95       	asr	r21
 144:	47 95       	ror	r20
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_ReadChennel+0x56>
 14a:	ca 01       	movw	r24, r20
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	fb 01       	movw	r30, r22
 150:	80 83       	st	Z, r24
	 break;
 152:	08 95       	ret
	 
	 case 3:
	 *Pin_value = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) ,Pin );
 154:	20 b3       	in	r18, 0x10	; 16
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	a9 01       	movw	r20, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_ReadChennel+0x74>
 15c:	55 95       	asr	r21
 15e:	47 95       	ror	r20
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_ReadChennel+0x70>
 164:	ca 01       	movw	r24, r20
 166:	81 70       	andi	r24, 0x01	; 1
 168:	fb 01       	movw	r30, r22
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <DIO_FlipChennel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_FlipChennel(uint8 Pin_Num)
{
	uint8 Port = 0 , Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 16e:	98 2f       	mov	r25, r24
 170:	96 95       	lsr	r25
 172:	96 95       	lsr	r25
 174:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
 176:	87 70       	andi	r24, 0x07	; 7
	
	switch(Port)
 178:	91 30       	cpi	r25, 0x01	; 1
 17a:	99 f0       	breq	.+38     	; 0x1a2 <DIO_FlipChennel+0x34>
 17c:	28 f0       	brcs	.+10     	; 0x188 <DIO_FlipChennel+0x1a>
 17e:	92 30       	cpi	r25, 0x02	; 2
 180:	e9 f0       	breq	.+58     	; 0x1bc <DIO_FlipChennel+0x4e>
 182:	93 30       	cpi	r25, 0x03	; 3
 184:	41 f1       	breq	.+80     	; 0x1d6 <DIO_FlipChennel+0x68>
 186:	08 95       	ret
	{
		case 0:
		 Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 188:	4b b3       	in	r20, 0x1b	; 27
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_FlipChennel+0x28>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_FlipChennel+0x24>
 19a:	cb 01       	movw	r24, r22
 19c:	84 27       	eor	r24, r20
 19e:	8b bb       	out	0x1b, r24	; 27
		break;
 1a0:	08 95       	ret
		
		case 1:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 1a2:	48 b3       	in	r20, 0x18	; 24
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_FlipChennel+0x42>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_FlipChennel+0x3e>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 27       	eor	r24, r20
 1b8:	88 bb       	out	0x18, r24	; 24
		break;
 1ba:	08 95       	ret
		
		case 2:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 1bc:	45 b3       	in	r20, 0x15	; 21
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_FlipChennel+0x5c>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_FlipChennel+0x58>
 1ce:	cb 01       	movw	r24, r22
 1d0:	84 27       	eor	r24, r20
 1d2:	85 bb       	out	0x15, r24	; 21
		break;
 1d4:	08 95       	ret
		
		case 3:
		Toggle_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 1d6:	42 b3       	in	r20, 0x12	; 18
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_FlipChennel+0x76>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_FlipChennel+0x72>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 27       	eor	r24, r20
 1ec:	82 bb       	out	0x12, r24	; 18
 1ee:	08 95       	ret

000001f0 <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	7e c0       	rjmp	.+252    	; 0x2f0 <PORT_Init+0x100>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e0 5a       	subi	r30, 0xA0	; 160
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	90 81       	ld	r25, Z
 202:	29 2f       	mov	r18, r25
 204:	26 95       	lsr	r18
 206:	26 95       	lsr	r18
 208:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS  ;
 20a:	97 70       	andi	r25, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR ;
 20c:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 20e:	33 23       	and	r19, r19
 210:	b9 f1       	breq	.+110    	; 0x280 <PORT_Init+0x90>
 212:	31 30       	cpi	r19, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <PORT_Init+0x28>
 216:	6b c0       	rjmp	.+214    	; 0x2ee <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			
			switch(Port)
 218:	21 30       	cpi	r18, 0x01	; 1
 21a:	89 f0       	breq	.+34     	; 0x23e <PORT_Init+0x4e>
 21c:	28 f0       	brcs	.+10     	; 0x228 <PORT_Init+0x38>
 21e:	22 30       	cpi	r18, 0x02	; 2
 220:	c9 f0       	breq	.+50     	; 0x254 <PORT_Init+0x64>
 222:	23 30       	cpi	r18, 0x03	; 3
 224:	11 f1       	breq	.+68     	; 0x26a <PORT_Init+0x7a>
 226:	63 c0       	rjmp	.+198    	; 0x2ee <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 228:	4a b3       	in	r20, 0x1a	; 26
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <PORT_Init+0x44>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	9a 95       	dec	r25
 236:	e2 f7       	brpl	.-8      	; 0x230 <PORT_Init+0x40>
 238:	24 2b       	or	r18, r20
 23a:	2a bb       	out	0x1a, r18	; 26

				break;
 23c:	58 c0       	rjmp	.+176    	; 0x2ee <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 23e:	47 b3       	in	r20, 0x17	; 23
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <PORT_Init+0x5a>
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	9a 95       	dec	r25
 24c:	e2 f7       	brpl	.-8      	; 0x246 <PORT_Init+0x56>
 24e:	24 2b       	or	r18, r20
 250:	27 bb       	out	0x17, r18	; 23
				
				break;
 252:	4d c0       	rjmp	.+154    	; 0x2ee <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 254:	44 b3       	in	r20, 0x14	; 20
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <PORT_Init+0x70>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	9a 95       	dec	r25
 262:	e2 f7       	brpl	.-8      	; 0x25c <PORT_Init+0x6c>
 264:	24 2b       	or	r18, r20
 266:	24 bb       	out	0x14, r18	; 20
				
				break;
 268:	42 c0       	rjmp	.+132    	; 0x2ee <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 26a:	41 b3       	in	r20, 0x11	; 17
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <PORT_Init+0x86>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	9a 95       	dec	r25
 278:	e2 f7       	brpl	.-8      	; 0x272 <PORT_Init+0x82>
 27a:	24 2b       	or	r18, r20
 27c:	21 bb       	out	0x11, r18	; 17
				
				break;
 27e:	37 c0       	rjmp	.+110    	; 0x2ee <PORT_Init+0xfe>
				break;
			}
			break;
			
			case PIN_INPUT :
			switch(Port)
 280:	21 30       	cpi	r18, 0x01	; 1
 282:	91 f0       	breq	.+36     	; 0x2a8 <PORT_Init+0xb8>
 284:	28 f0       	brcs	.+10     	; 0x290 <PORT_Init+0xa0>
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	d9 f0       	breq	.+54     	; 0x2c0 <PORT_Init+0xd0>
 28a:	23 30       	cpi	r18, 0x03	; 3
 28c:	29 f1       	breq	.+74     	; 0x2d8 <PORT_Init+0xe8>
 28e:	2f c0       	rjmp	.+94     	; 0x2ee <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 290:	4a b3       	in	r20, 0x1a	; 26
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <PORT_Init+0xac>
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	9a 95       	dec	r25
 29e:	e2 f7       	brpl	.-8      	; 0x298 <PORT_Init+0xa8>
 2a0:	20 95       	com	r18
 2a2:	24 23       	and	r18, r20
 2a4:	2a bb       	out	0x1a, r18	; 26

				break;
 2a6:	23 c0       	rjmp	.+70     	; 0x2ee <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 2a8:	47 b3       	in	r20, 0x17	; 23
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <PORT_Init+0xc4>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	9a 95       	dec	r25
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <PORT_Init+0xc0>
 2b8:	20 95       	com	r18
 2ba:	24 23       	and	r18, r20
 2bc:	27 bb       	out	0x17, r18	; 23
				
				break;
 2be:	17 c0       	rjmp	.+46     	; 0x2ee <PORT_Init+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 2c0:	44 b3       	in	r20, 0x14	; 20
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <PORT_Init+0xdc>
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	9a 95       	dec	r25
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <PORT_Init+0xd8>
 2d0:	20 95       	com	r18
 2d2:	24 23       	and	r18, r20
 2d4:	24 bb       	out	0x14, r18	; 20
				
				break;
 2d6:	0b c0       	rjmp	.+22     	; 0x2ee <PORT_Init+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 2d8:	41 b3       	in	r20, 0x11	; 17
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <PORT_Init+0xf4>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	9a 95       	dec	r25
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <PORT_Init+0xf0>
 2e8:	20 95       	com	r18
 2ea:	24 23       	and	r18, r20
 2ec:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	08 f4       	brcc	.+2      	; 0x2f6 <PORT_Init+0x106>
 2f4:	7f cf       	rjmp	.-258    	; 0x1f4 <PORT_Init+0x4>
			
			default:
			break;
		}
	}
}
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
