
Calculator 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00001036  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008d  008000bc  008000bc  00001126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001801  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf8  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbf  00000000  00000000  000036e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000046a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e5  00000000  00000000  00004f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	9b 01       	movw	r18, r22
      56:	95 01       	movw	r18, r10
      58:	a6 01       	movw	r20, r12
      5a:	98 01       	movw	r18, r16
      5c:	a6 01       	movw	r20, r12
      5e:	9e 01       	movw	r18, r28
      60:	53 01       	movw	r10, r6
      62:	a8 00       	.word	0x00a8	; ????
      64:	bb 00       	.word	0x00bb	; ????
      66:	ce 00       	.word	0x00ce	; ????
      68:	e1 00       	.word	0x00e1	; ????
      6a:	f4 00       	.word	0x00f4	; ????
      6c:	07 01       	movw	r0, r14
      6e:	1a 01       	movw	r2, r20
      70:	2d 01       	movw	r4, r26
      72:	40 01       	movw	r8, r0
      74:	a6 01       	movw	r20, r12
      76:	a6 01       	movw	r20, r12
      78:	a6 01       	movw	r20, r12
      7a:	a1 01       	movw	r20, r2
      7c:	a6 01       	movw	r20, r12
      7e:	a6 01       	movw	r20, r12
      80:	a6 01       	movw	r20, r12
      82:	a6 01       	movw	r20, r12
      84:	a6 01       	movw	r20, r12
      86:	a6 01       	movw	r20, r12
      88:	a6 01       	movw	r20, r12
      8a:	a6 01       	movw	r20, r12
      8c:	a6 01       	movw	r20, r12
      8e:	a6 01       	movw	r20, r12
      90:	a6 01       	movw	r20, r12
      92:	a6 01       	movw	r20, r12
      94:	a6 01       	movw	r20, r12
      96:	a6 01       	movw	r20, r12
      98:	a6 01       	movw	r20, r12
      9a:	a6 01       	movw	r20, r12
      9c:	a6 01       	movw	r20, r12
      9e:	a6 01       	movw	r20, r12
      a0:	a6 01       	movw	r20, r12
      a2:	a6 01       	movw	r20, r12
      a4:	a6 01       	movw	r20, r12
      a6:	a6 01       	movw	r20, r12
      a8:	a6 01       	movw	r20, r12
      aa:	a6 01       	movw	r20, r12
      ac:	a6 01       	movw	r20, r12
      ae:	a6 01       	movw	r20, r12
      b0:	a6 01       	movw	r20, r12
      b2:	a6 01       	movw	r20, r12
      b4:	a6 01       	movw	r20, r12
      b6:	a6 01       	movw	r20, r12
      b8:	a6 01       	movw	r20, r12
      ba:	a6 01       	movw	r20, r12
      bc:	a6 01       	movw	r20, r12
      be:	a6 01       	movw	r20, r12
      c0:	a6 01       	movw	r20, r12
      c2:	a6 01       	movw	r20, r12
      c4:	a6 01       	movw	r20, r12
      c6:	66 01       	movw	r12, r12

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf e5       	ldi	r28, 0x5F	; 95
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	a0 e6       	ldi	r26, 0x60	; 96
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e3       	ldi	r30, 0x36	; 54
      dc:	f0 e1       	ldi	r31, 0x10	; 16
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 3b       	cpi	r26, 0xBC	; 188
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	ac eb       	ldi	r26, 0xBC	; 188
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 34       	cpi	r26, 0x49	; 73
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 83 00 	call	0x106	; 0x106 <main>
      fe:	0c 94 19 08 	jmp	0x1032	; 0x1032 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <main>:
int main(void)
{
	Uint_8 button = 0 ,i=0 ;
	
	Sint_32 result=0;
	PORT_Init();
     106:	0e 94 24 07 	call	0xe48	; 0xe48 <PORT_Init>
	LCD_Init();
     10a:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_Init>
	KEYPAD_Init();
     10e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <KEYPAD_Init>
    
    while (1) 
    {
		button=KEYPAD_GetValue();
     112:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <KEYPAD_GetValue>
		if (button !=0)
     116:	88 23       	and	r24, r24
     118:	e1 f3       	breq	.-8      	; 0x112 <main+0xc>
		{
			Calculator_Display(button);		
     11a:	0e 94 90 00 	call	0x120	; 0x120 <Calculator_Display>
     11e:	f9 cf       	rjmp	.-14     	; 0x112 <main+0xc>

00000120 <Calculator_Display>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
 void Calculator_Display(Uint_8 button)
{
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	c8 2f       	mov	r28, r24
static	Sint_8 cnt =0;
static	Sint_32 num = 0 ;
static	Sint_32 NUM = 0;
static	Sint_32 res = 0;
Uint_8 z=0 ,i =0;
switch (button)
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	fc 01       	movw	r30, r24
     13e:	ba 97       	sbiw	r30, 0x2a	; 42
     140:	ea 33       	cpi	r30, 0x3A	; 58
     142:	f1 05       	cpc	r31, r1
     144:	08 f0       	brcs	.+2      	; 0x148 <Calculator_Display+0x28>
     146:	02 c1       	rjmp	.+516    	; 0x34c <Calculator_Display+0x22c>
     148:	e6 5d       	subi	r30, 0xD6	; 214
     14a:	ff 4f       	sbci	r31, 0xFF	; 255
     14c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__tablejump2__>
{
	case '1':
	NUM = button-0X30;
     150:	68 2f       	mov	r22, r24
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	60 53       	subi	r22, 0x30	; 48
     156:	71 09       	sbc	r23, r1
     158:	07 2e       	mov	r0, r23
     15a:	00 0c       	add	r0, r0
     15c:	88 0b       	sbc	r24, r24
     15e:	99 0b       	sbc	r25, r25
     160:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     164:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     168:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     16c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     170:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     174:	eb c0       	rjmp	.+470    	; 0x34c <Calculator_Display+0x22c>
	case '2':
	NUM = button-0X30;
     176:	68 2f       	mov	r22, r24
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	60 53       	subi	r22, 0x30	; 48
     17c:	71 09       	sbc	r23, r1
     17e:	07 2e       	mov	r0, r23
     180:	00 0c       	add	r0, r0
     182:	88 0b       	sbc	r24, r24
     184:	99 0b       	sbc	r25, r25
     186:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     18a:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     18e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     192:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     196:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     19a:	d8 c0       	rjmp	.+432    	; 0x34c <Calculator_Display+0x22c>
	case '3':
	NUM = button-0X30;
     19c:	68 2f       	mov	r22, r24
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	60 53       	subi	r22, 0x30	; 48
     1a2:	71 09       	sbc	r23, r1
     1a4:	07 2e       	mov	r0, r23
     1a6:	00 0c       	add	r0, r0
     1a8:	88 0b       	sbc	r24, r24
     1aa:	99 0b       	sbc	r25, r25
     1ac:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     1b0:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     1b4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     1b8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     1bc:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     1c0:	c5 c0       	rjmp	.+394    	; 0x34c <Calculator_Display+0x22c>
	case '4':
	NUM = button-0X30;
     1c2:	68 2f       	mov	r22, r24
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	60 53       	subi	r22, 0x30	; 48
     1c8:	71 09       	sbc	r23, r1
     1ca:	07 2e       	mov	r0, r23
     1cc:	00 0c       	add	r0, r0
     1ce:	88 0b       	sbc	r24, r24
     1d0:	99 0b       	sbc	r25, r25
     1d2:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     1d6:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     1da:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     1de:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     1e2:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     1e6:	b2 c0       	rjmp	.+356    	; 0x34c <Calculator_Display+0x22c>
	case '5':
	NUM = button-0X30;
     1e8:	68 2f       	mov	r22, r24
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	60 53       	subi	r22, 0x30	; 48
     1ee:	71 09       	sbc	r23, r1
     1f0:	07 2e       	mov	r0, r23
     1f2:	00 0c       	add	r0, r0
     1f4:	88 0b       	sbc	r24, r24
     1f6:	99 0b       	sbc	r25, r25
     1f8:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     1fc:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     200:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     204:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     208:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     20c:	9f c0       	rjmp	.+318    	; 0x34c <Calculator_Display+0x22c>
	case '6':
	NUM = button-0X30;
     20e:	68 2f       	mov	r22, r24
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	60 53       	subi	r22, 0x30	; 48
     214:	71 09       	sbc	r23, r1
     216:	07 2e       	mov	r0, r23
     218:	00 0c       	add	r0, r0
     21a:	88 0b       	sbc	r24, r24
     21c:	99 0b       	sbc	r25, r25
     21e:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     222:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     226:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     22a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     22e:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     232:	8c c0       	rjmp	.+280    	; 0x34c <Calculator_Display+0x22c>
	case '7':
	NUM = button-0X30;
     234:	68 2f       	mov	r22, r24
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	60 53       	subi	r22, 0x30	; 48
     23a:	71 09       	sbc	r23, r1
     23c:	07 2e       	mov	r0, r23
     23e:	00 0c       	add	r0, r0
     240:	88 0b       	sbc	r24, r24
     242:	99 0b       	sbc	r25, r25
     244:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     248:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     24c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     250:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     254:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     258:	79 c0       	rjmp	.+242    	; 0x34c <Calculator_Display+0x22c>
	case '8':
	NUM = button-0X30;
     25a:	68 2f       	mov	r22, r24
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	60 53       	subi	r22, 0x30	; 48
     260:	71 09       	sbc	r23, r1
     262:	07 2e       	mov	r0, r23
     264:	00 0c       	add	r0, r0
     266:	88 0b       	sbc	r24, r24
     268:	99 0b       	sbc	r25, r25
     26a:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     26e:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     272:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     276:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     27a:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     27e:	66 c0       	rjmp	.+204    	; 0x34c <Calculator_Display+0x22c>
	case '9':
	NUM = button-0X30;
     280:	68 2f       	mov	r22, r24
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	60 53       	subi	r22, 0x30	; 48
     286:	71 09       	sbc	r23, r1
     288:	07 2e       	mov	r0, r23
     28a:	00 0c       	add	r0, r0
     28c:	88 0b       	sbc	r24, r24
     28e:	99 0b       	sbc	r25, r25
     290:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     294:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     298:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     29c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     2a0:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     2a4:	53 c0       	rjmp	.+166    	; 0x34c <Calculator_Display+0x22c>
	case '0':
	NUM = button-0X30;
     2a6:	68 2f       	mov	r22, r24
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	60 53       	subi	r22, 0x30	; 48
     2ac:	71 09       	sbc	r23, r1
     2ae:	07 2e       	mov	r0, r23
     2b0:	00 0c       	add	r0, r0
     2b2:	88 0b       	sbc	r24, r24
     2b4:	99 0b       	sbc	r25, r25
     2b6:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NUM.1782>
     2ba:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NUM.1782+0x1>
     2be:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <NUM.1782+0x2>
     2c2:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <NUM.1782+0x3>
	LCD_WriteInt(NUM);
     2c6:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
	break;
     2ca:	40 c0       	rjmp	.+128    	; 0x34c <Calculator_Display+0x22c>
	case 'c':
	NUM =0,num = 0,res= 0,i=0,cnt = 0,z=0;
     2cc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <NUM.1782>
     2d0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <NUM.1782+0x1>
     2d4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <NUM.1782+0x2>
     2d8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <NUM.1782+0x3>
     2dc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <num.1781>
     2e0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <num.1781+0x1>
     2e4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <num.1781+0x2>
     2e8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <num.1781+0x3>
     2ec:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <res.1783>
     2f0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <res.1783+0x1>
     2f4:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <res.1783+0x2>
     2f8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <res.1783+0x3>
     2fc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cnt.1780>
	for (i=0;i<32;i++)
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0d c0       	rjmp	.+26     	; 0x31e <Calculator_Display+0x1fe>
	{
		arr[i]=0;	
     304:	e8 2f       	mov	r30, r24
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	e4 54       	subi	r30, 0x44	; 68
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	10 82       	st	Z, r1
     316:	11 82       	std	Z+1, r1	; 0x01
     318:	12 82       	std	Z+2, r1	; 0x02
     31a:	13 82       	std	Z+3, r1	; 0x03
	NUM = button-0X30;
	LCD_WriteInt(NUM);
	break;
	case 'c':
	NUM =0,num = 0,res= 0,i=0,cnt = 0,z=0;
	for (i=0;i<32;i++)
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	80 32       	cpi	r24, 0x20	; 32
     320:	88 f3       	brcs	.-30     	; 0x304 <Calculator_Display+0x1e4>
	{
		arr[i]=0;	
	}
	LCD_WriteCommand(0x01);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
	break;
     328:	11 c0       	rjmp	.+34     	; 0x34c <Calculator_Display+0x22c>
	case '+':
	LCD_WriteChar(button);
     32a:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
	break;
     32e:	0e c0       	rjmp	.+28     	; 0x34c <Calculator_Display+0x22c>
	case '-':
	LCD_WriteChar(button);
     330:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
	break;
     334:	0b c0       	rjmp	.+22     	; 0x34c <Calculator_Display+0x22c>
	case '*':
	LCD_WriteChar(button);
     336:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
	break;
     33a:	08 c0       	rjmp	.+16     	; 0x34c <Calculator_Display+0x22c>
	case '/':
	LCD_WriteChar(button);
     33c:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
	break;
     340:	05 c0       	rjmp	.+10     	; 0x34c <Calculator_Display+0x22c>
	case '=':
	LCD_WriteChar(button);
     342:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
	LCD_WriteCommand(0x01);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
	break;
}
if (button>='0'&&button<='9')
     34c:	80 ed       	ldi	r24, 0xD0	; 208
     34e:	8c 0f       	add	r24, r28
     350:	8a 30       	cpi	r24, 0x0A	; 10
     352:	d8 f5       	brcc	.+118    	; 0x3ca <Calculator_Display+0x2aa>
{
		num = num*10+NUM;	
     354:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <num.1781>
     358:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <num.1781+0x1>
     35c:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <num.1781+0x2>
     360:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <num.1781+0x3>
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	aa 1f       	adc	r26, r26
     36a:	bb 1f       	adc	r27, r27
     36c:	ac 01       	movw	r20, r24
     36e:	bd 01       	movw	r22, r26
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	66 1f       	adc	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	44 0f       	add	r20, r20
     37a:	55 1f       	adc	r21, r21
     37c:	66 1f       	adc	r22, r22
     37e:	77 1f       	adc	r23, r23
     380:	84 0f       	add	r24, r20
     382:	95 1f       	adc	r25, r21
     384:	a6 1f       	adc	r26, r22
     386:	b7 1f       	adc	r27, r23
     388:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <NUM.1782>
     38c:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <NUM.1782+0x1>
     390:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <NUM.1782+0x2>
     394:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <NUM.1782+0x3>
     398:	84 0f       	add	r24, r20
     39a:	95 1f       	adc	r25, r21
     39c:	a6 1f       	adc	r26, r22
     39e:	b7 1f       	adc	r27, r23
     3a0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <num.1781>
     3a4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <num.1781+0x1>
     3a8:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <num.1781+0x2>
     3ac:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <num.1781+0x3>
		arr[cnt] = num;
     3b0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <cnt.1780>
     3b4:	24 e0       	ldi	r18, 0x04	; 4
     3b6:	e2 02       	muls	r30, r18
     3b8:	f0 01       	movw	r30, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	e4 54       	subi	r30, 0x44	; 68
     3be:	ff 4f       	sbci	r31, 0xFF	; 255
     3c0:	80 83       	st	Z, r24
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	a2 83       	std	Z+2, r26	; 0x02
     3c6:	b3 83       	std	Z+3, r27	; 0x03
     3c8:	79 c2       	rjmp	.+1266   	; 0x8bc <__stack+0x5d>
}


 else if (button == '+' || button == '-' || button == '*' || button == '/' )
     3ca:	cb 32       	cpi	r28, 0x2B	; 43
     3cc:	31 f0       	breq	.+12     	; 0x3da <Calculator_Display+0x2ba>
     3ce:	cd 32       	cpi	r28, 0x2D	; 45
     3d0:	21 f0       	breq	.+8      	; 0x3da <Calculator_Display+0x2ba>
     3d2:	ca 32       	cpi	r28, 0x2A	; 42
     3d4:	11 f0       	breq	.+4      	; 0x3da <Calculator_Display+0x2ba>
     3d6:	cf 32       	cpi	r28, 0x2F	; 47
     3d8:	e9 f4       	brne	.+58     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
{
	cnt++;
     3da:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cnt.1780>
     3de:	8f 5f       	subi	r24, 0xFF	; 255
	arr[cnt]= button;
     3e0:	44 e0       	ldi	r20, 0x04	; 4
     3e2:	84 02       	muls	r24, r20
     3e4:	f0 01       	movw	r30, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	e4 54       	subi	r30, 0x44	; 68
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	4c 2f       	mov	r20, r28
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	40 83       	st	Z, r20
     3f6:	51 83       	std	Z+1, r21	; 0x01
     3f8:	62 83       	std	Z+2, r22	; 0x02
     3fa:	73 83       	std	Z+3, r23	; 0x03
	cnt++;
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <cnt.1780>
	num = 0;
     402:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <num.1781>
     406:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <num.1781+0x1>
     40a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <num.1781+0x2>
     40e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <num.1781+0x3>
     412:	54 c2       	rjmp	.+1192   	; 0x8bc <__stack+0x5d>
}



else if (button == '=')
     414:	cd 33       	cpi	r28, 0x3D	; 61
     416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	51 c2       	rjmp	.+1186   	; 0x8bc <__stack+0x5d>
     41a:	00 c1       	rjmp	.+512    	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
{	
   for ( i =0 ; i < cnt+1 ; i++)
{
		if (arr[i] == '*')
     41c:	fc 01       	movw	r30, r24
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	e4 54       	subi	r30, 0x44	; 68
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	40 81       	ld	r20, Z
     42c:	51 81       	ldd	r21, Z+1	; 0x01
     42e:	62 81       	ldd	r22, Z+2	; 0x02
     430:	73 81       	ldd	r23, Z+3	; 0x03
     432:	4a 32       	cpi	r20, 0x2A	; 42
     434:	51 05       	cpc	r21, r1
     436:	61 05       	cpc	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43c:	5f c0       	rjmp	.+190    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		{
			arr[i-1] = arr[i-1] * arr [i+1];
     43e:	7c 01       	movw	r14, r24
     440:	51 e0       	ldi	r21, 0x01	; 1
     442:	e5 1a       	sub	r14, r21
     444:	f1 08       	sbc	r15, r1
     446:	97 01       	movw	r18, r14
     448:	22 0f       	add	r18, r18
     44a:	33 1f       	adc	r19, r19
     44c:	22 0f       	add	r18, r18
     44e:	33 1f       	adc	r19, r19
     450:	f9 01       	movw	r30, r18
     452:	e4 54       	subi	r30, 0x44	; 68
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	7f 01       	movw	r14, r30
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	fc 01       	movw	r30, r24
     462:	31 96       	adiw	r30, 0x01	; 1
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	e4 54       	subi	r30, 0x44	; 68
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	60 81       	ld	r22, Z
     472:	71 81       	ldd	r23, Z+1	; 0x01
     474:	82 81       	ldd	r24, Z+2	; 0x02
     476:	93 81       	ldd	r25, Z+3	; 0x03
     478:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsi3>
     47c:	f7 01       	movw	r30, r14
     47e:	60 83       	st	Z, r22
     480:	71 83       	std	Z+1, r23	; 0x01
     482:	82 83       	std	Z+2, r24	; 0x02
     484:	93 83       	std	Z+3, r25	; 0x03

			for ( z = i ; z < cnt+1 ; z+=2)
     486:	31 c0       	rjmp	.+98     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			{
				arr[z] = arr[z+2];
     488:	fc 01       	movw	r30, r24
     48a:	32 96       	adiw	r30, 0x02	; 2
     48c:	ee 0f       	add	r30, r30
     48e:	ff 1f       	adc	r31, r31
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	e4 54       	subi	r30, 0x44	; 68
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	40 81       	ld	r20, Z
     49a:	51 81       	ldd	r21, Z+1	; 0x01
     49c:	62 81       	ldd	r22, Z+2	; 0x02
     49e:	73 81       	ldd	r23, Z+3	; 0x03
     4a0:	fc 01       	movw	r30, r24
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	e4 54       	subi	r30, 0x44	; 68
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	40 83       	st	Z, r20
     4b0:	51 83       	std	Z+1, r21	; 0x01
     4b2:	62 83       	std	Z+2, r22	; 0x02
     4b4:	73 83       	std	Z+3, r23	; 0x03
				arr[z+1]=arr[z+3];
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 96       	adiw	r30, 0x01	; 1
     4ba:	dc 01       	movw	r26, r24
     4bc:	13 96       	adiw	r26, 0x03	; 3
     4be:	aa 0f       	add	r26, r26
     4c0:	bb 1f       	adc	r27, r27
     4c2:	aa 0f       	add	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	a4 54       	subi	r26, 0x44	; 68
     4c8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ca:	8d 91       	ld	r24, X+
     4cc:	9d 91       	ld	r25, X+
     4ce:	0d 90       	ld	r0, X+
     4d0:	bc 91       	ld	r27, X
     4d2:	a0 2d       	mov	r26, r0
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e4 54       	subi	r30, 0x44	; 68
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
{
		if (arr[i] == '*')
		{
			arr[i-1] = arr[i-1] * arr [i+1];

			for ( z = i ; z < cnt+1 ; z+=2)
     4e8:	1e 5f       	subi	r17, 0xFE	; 254
     4ea:	81 2f       	mov	r24, r17
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	8c 17       	cp	r24, r28
     4f0:	9d 07       	cpc	r25, r29
     4f2:	54 f2       	brlt	.-108    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			{
				arr[z] = arr[z+2];
				arr[z+1]=arr[z+3];
			}
			cnt-=2;
     4f4:	02 50       	subi	r16, 0x02	; 2
     4f6:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <cnt.1780>
			i=0;
     4fa:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (arr[i] == '/')
     4fc:	81 2f       	mov	r24, r17
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	e4 54       	subi	r30, 0x44	; 68
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	40 81       	ld	r20, Z
     510:	51 81       	ldd	r21, Z+1	; 0x01
     512:	62 81       	ldd	r22, Z+2	; 0x02
     514:	73 81       	ldd	r23, Z+3	; 0x03
     516:	4f 32       	cpi	r20, 0x2F	; 47
     518:	51 05       	cpc	r21, r1
     51a:	61 05       	cpc	r22, r1
     51c:	71 05       	cpc	r23, r1
     51e:	09 f0       	breq	.+2      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     520:	7b c0       	rjmp	.+246    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
		{
			if (arr[i+1]==0)
     522:	fc 01       	movw	r30, r24
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	e4 54       	subi	r30, 0x44	; 68
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	20 81       	ld	r18, Z
     534:	31 81       	ldd	r19, Z+1	; 0x01
     536:	42 81       	ldd	r20, Z+2	; 0x02
     538:	53 81       	ldd	r21, Z+3	; 0x03
     53a:	21 15       	cp	r18, r1
     53c:	31 05       	cpc	r19, r1
     53e:	41 05       	cpc	r20, r1
     540:	51 05       	cpc	r21, r1
     542:	a9 f4       	brne	.+42     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			{
				LCD_WriteCommand(0x01);
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
				LCD_GOTO(0,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_GOTO>
				LCD_WriteString("Divided By Zero!");
     552:	88 e9       	ldi	r24, 0x98	; 152
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_WriteString>
				LCD_GOTO(1,4);
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_GOTO>
				LCD_WriteString("Undefined         ");
     562:	89 ea       	ldi	r24, 0xA9	; 169
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_WriteString>
		{
			arr[z] = arr[z+2];
			arr[z+1]=arr[z+3];
		}
		cnt-=2;
		i=0;
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	4d c1       	rjmp	.+666    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				LCD_GOTO(1,4);
				LCD_WriteString("Undefined         ");
				
				break;
			}
			arr[i-1] = (arr[i-1] / arr [ i+1]);
     56e:	ec 01       	movw	r28, r24
     570:	21 97       	sbiw	r28, 0x01	; 1
     572:	cc 0f       	add	r28, r28
     574:	dd 1f       	adc	r29, r29
     576:	cc 0f       	add	r28, r28
     578:	dd 1f       	adc	r29, r29
     57a:	c4 54       	subi	r28, 0x44	; 68
     57c:	df 4f       	sbci	r29, 0xFF	; 255
     57e:	68 81       	ld	r22, Y
     580:	79 81       	ldd	r23, Y+1	; 0x01
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	9b 81       	ldd	r25, Y+3	; 0x03
     586:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodsi4>
     58a:	28 83       	st	Y, r18
     58c:	39 83       	std	Y+1, r19	; 0x01
     58e:	4a 83       	std	Y+2, r20	; 0x02
     590:	5b 83       	std	Y+3, r21	; 0x03

			for ( z = i ; z < cnt+1 ; z+=2)
     592:	31 c0       	rjmp	.+98     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
			{
				arr[z] = arr[z+2];
     594:	fc 01       	movw	r30, r24
     596:	32 96       	adiw	r30, 0x02	; 2
     598:	ee 0f       	add	r30, r30
     59a:	ff 1f       	adc	r31, r31
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	e4 54       	subi	r30, 0x44	; 68
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	40 81       	ld	r20, Z
     5a6:	51 81       	ldd	r21, Z+1	; 0x01
     5a8:	62 81       	ldd	r22, Z+2	; 0x02
     5aa:	73 81       	ldd	r23, Z+3	; 0x03
     5ac:	fc 01       	movw	r30, r24
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	e4 54       	subi	r30, 0x44	; 68
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	40 83       	st	Z, r20
     5bc:	51 83       	std	Z+1, r21	; 0x01
     5be:	62 83       	std	Z+2, r22	; 0x02
     5c0:	73 83       	std	Z+3, r23	; 0x03
				arr[z+1]=arr[z+3];
     5c2:	fc 01       	movw	r30, r24
     5c4:	31 96       	adiw	r30, 0x01	; 1
     5c6:	dc 01       	movw	r26, r24
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	aa 0f       	add	r26, r26
     5cc:	bb 1f       	adc	r27, r27
     5ce:	aa 0f       	add	r26, r26
     5d0:	bb 1f       	adc	r27, r27
     5d2:	a4 54       	subi	r26, 0x44	; 68
     5d4:	bf 4f       	sbci	r27, 0xFF	; 255
     5d6:	8d 91       	ld	r24, X+
     5d8:	9d 91       	ld	r25, X+
     5da:	0d 90       	ld	r0, X+
     5dc:	bc 91       	ld	r27, X
     5de:	a0 2d       	mov	r26, r0
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	e4 54       	subi	r30, 0x44	; 68
     5ea:	ff 4f       	sbci	r31, 0xFF	; 255
     5ec:	80 83       	st	Z, r24
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	a2 83       	std	Z+2, r26	; 0x02
     5f2:	b3 83       	std	Z+3, r27	; 0x03
				
				break;
			}
			arr[i-1] = (arr[i-1] / arr [ i+1]);

			for ( z = i ; z < cnt+1 ; z+=2)
     5f4:	1e 5f       	subi	r17, 0xFE	; 254
     5f6:	81 2f       	mov	r24, r17
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <cnt.1780>
     5fe:	24 2f       	mov	r18, r20
     600:	04 2e       	mov	r0, r20
     602:	00 0c       	add	r0, r0
     604:	33 0b       	sbc	r19, r19
     606:	2f 5f       	subi	r18, 0xFF	; 255
     608:	3f 4f       	sbci	r19, 0xFF	; 255
     60a:	82 17       	cp	r24, r18
     60c:	93 07       	cpc	r25, r19
     60e:	14 f2       	brlt	.-124    	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
			{
				arr[z] = arr[z+2];
				arr[z+1]=arr[z+3];
			}
			cnt-=2;
     610:	42 50       	subi	r20, 0x02	; 2
     612:	40 93 3c 01 	sts	0x013C, r20	; 0x80013c <cnt.1780>
			i=0;
     616:	10 e0       	ldi	r17, 0x00	; 0



else if (button == '=')
{	
   for ( i =0 ; i < cnt+1 ; i++)
     618:	1f 5f       	subi	r17, 0xFF	; 255
     61a:	01 c0       	rjmp	.+2      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	81 2f       	mov	r24, r17
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <cnt.1780>
     626:	c0 2f       	mov	r28, r16
     628:	00 2e       	mov	r0, r16
     62a:	00 0c       	add	r0, r0
     62c:	dd 0b       	sbc	r29, r29
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	8c 17       	cp	r24, r28
     632:	9d 07       	cpc	r25, r29
     634:	0c f4       	brge	.+2      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
     636:	f2 ce       	rjmp	.-540    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     638:	98 cf       	rjmp	.-208    	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
}


for ( i =0 ; i < cnt +1 ; i++)
{
	if (arr[i] == '+')
     63a:	fc 01       	movw	r30, r24
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	e4 54       	subi	r30, 0x44	; 68
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	c0 80       	ld	r12, Z
     64a:	d1 80       	ldd	r13, Z+1	; 0x01
     64c:	e2 80       	ldd	r14, Z+2	; 0x02
     64e:	f3 80       	ldd	r15, Z+3	; 0x03
     650:	fb e2       	ldi	r31, 0x2B	; 43
     652:	cf 16       	cp	r12, r31
     654:	d1 04       	cpc	r13, r1
     656:	e1 04       	cpc	r14, r1
     658:	f1 04       	cpc	r15, r1
     65a:	09 f0       	breq	.+2      	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
     65c:	5d c0       	rjmp	.+186    	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
	{
		arr[i-1] = arr[i-1] + arr [ i+1];
     65e:	dc 01       	movw	r26, r24
     660:	11 97       	sbiw	r26, 0x01	; 1
     662:	aa 0f       	add	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	aa 0f       	add	r26, r26
     668:	bb 1f       	adc	r27, r27
     66a:	a4 54       	subi	r26, 0x44	; 68
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	8d 90       	ld	r8, X+
     670:	9d 90       	ld	r9, X+
     672:	ad 90       	ld	r10, X+
     674:	bc 90       	ld	r11, X
     676:	13 97       	sbiw	r26, 0x03	; 3
     678:	fc 01       	movw	r30, r24
     67a:	31 96       	adiw	r30, 0x01	; 1
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e4 54       	subi	r30, 0x44	; 68
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	c0 80       	ld	r12, Z
     68a:	d1 80       	ldd	r13, Z+1	; 0x01
     68c:	e2 80       	ldd	r14, Z+2	; 0x02
     68e:	f3 80       	ldd	r15, Z+3	; 0x03
     690:	c8 0c       	add	r12, r8
     692:	d9 1c       	adc	r13, r9
     694:	ea 1c       	adc	r14, r10
     696:	fb 1c       	adc	r15, r11
     698:	cd 92       	st	X+, r12
     69a:	dd 92       	st	X+, r13
     69c:	ed 92       	st	X+, r14
     69e:	fc 92       	st	X, r15
     6a0:	13 97       	sbiw	r26, 0x03	; 3

		for ( z = i ; z < cnt+1 ; z+=2)
     6a2:	31 c0       	rjmp	.+98     	; 0x706 <__EEPROM_REGION_LENGTH__+0x306>
		{
			arr[z] = arr[z+2];
     6a4:	fc 01       	movw	r30, r24
     6a6:	32 96       	adiw	r30, 0x02	; 2
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e4 54       	subi	r30, 0x44	; 68
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	c0 80       	ld	r12, Z
     6b6:	d1 80       	ldd	r13, Z+1	; 0x01
     6b8:	e2 80       	ldd	r14, Z+2	; 0x02
     6ba:	f3 80       	ldd	r15, Z+3	; 0x03
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	e4 54       	subi	r30, 0x44	; 68
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	c0 82       	st	Z, r12
     6cc:	d1 82       	std	Z+1, r13	; 0x01
     6ce:	e2 82       	std	Z+2, r14	; 0x02
     6d0:	f3 82       	std	Z+3, r15	; 0x03
			arr[z+1]=arr[z+3];
     6d2:	fc 01       	movw	r30, r24
     6d4:	31 96       	adiw	r30, 0x01	; 1
     6d6:	dc 01       	movw	r26, r24
     6d8:	13 96       	adiw	r26, 0x03	; 3
     6da:	aa 0f       	add	r26, r26
     6dc:	bb 1f       	adc	r27, r27
     6de:	aa 0f       	add	r26, r26
     6e0:	bb 1f       	adc	r27, r27
     6e2:	a4 54       	subi	r26, 0x44	; 68
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	8d 91       	ld	r24, X+
     6e8:	9d 91       	ld	r25, X+
     6ea:	0d 90       	ld	r0, X+
     6ec:	bc 91       	ld	r27, X
     6ee:	a0 2d       	mov	r26, r0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e4 54       	subi	r30, 0x44	; 68
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	80 83       	st	Z, r24
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	a2 83       	std	Z+2, r26	; 0x02
     702:	b3 83       	std	Z+3, r27	; 0x03
{
	if (arr[i] == '+')
	{
		arr[i-1] = arr[i-1] + arr [ i+1];

		for ( z = i ; z < cnt+1 ; z+=2)
     704:	2e 5f       	subi	r18, 0xFE	; 254
     706:	82 2f       	mov	r24, r18
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	84 17       	cp	r24, r20
     70c:	95 07       	cpc	r25, r21
     70e:	54 f2       	brlt	.-108    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
		{
			arr[z] = arr[z+2];
			arr[z+1]=arr[z+3];
		}
		cnt-=2;
     710:	32 50       	subi	r19, 0x02	; 2
     712:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <cnt.1780>
		i=0;
     716:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (arr[i] == '-')
     718:	e2 2f       	mov	r30, r18
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	df 01       	movw	r26, r30
     71e:	aa 0f       	add	r26, r26
     720:	bb 1f       	adc	r27, r27
     722:	aa 0f       	add	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	a4 54       	subi	r26, 0x44	; 68
     728:	bf 4f       	sbci	r27, 0xFF	; 255
     72a:	8d 91       	ld	r24, X+
     72c:	9d 91       	ld	r25, X+
     72e:	0d 90       	ld	r0, X+
     730:	bc 91       	ld	r27, X
     732:	a0 2d       	mov	r26, r0
     734:	8d 97       	sbiw	r24, 0x2d	; 45
     736:	a1 05       	cpc	r26, r1
     738:	b1 05       	cpc	r27, r1
     73a:	09 f0       	breq	.+2      	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
     73c:	64 c0       	rjmp	.+200    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		arr[i-1] = arr[i-1] - arr [i+1];
     73e:	df 01       	movw	r26, r30
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	aa 0f       	add	r26, r26
     744:	bb 1f       	adc	r27, r27
     746:	aa 0f       	add	r26, r26
     748:	bb 1f       	adc	r27, r27
     74a:	a4 54       	subi	r26, 0x44	; 68
     74c:	bf 4f       	sbci	r27, 0xFF	; 255
     74e:	4d 91       	ld	r20, X+
     750:	5d 91       	ld	r21, X+
     752:	6d 91       	ld	r22, X+
     754:	7c 91       	ld	r23, X
     756:	13 97       	sbiw	r26, 0x03	; 3
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	e4 54       	subi	r30, 0x44	; 68
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	c0 80       	ld	r12, Z
     768:	d1 80       	ldd	r13, Z+1	; 0x01
     76a:	e2 80       	ldd	r14, Z+2	; 0x02
     76c:	f3 80       	ldd	r15, Z+3	; 0x03
     76e:	4c 19       	sub	r20, r12
     770:	5d 09       	sbc	r21, r13
     772:	6e 09       	sbc	r22, r14
     774:	7f 09       	sbc	r23, r15
     776:	4d 93       	st	X+, r20
     778:	5d 93       	st	X+, r21
     77a:	6d 93       	st	X+, r22
     77c:	7c 93       	st	X, r23
     77e:	13 97       	sbiw	r26, 0x03	; 3

		for ( z = i ; z < cnt+1 ; z+=2)
     780:	31 c0       	rjmp	.+98     	; 0x7e4 <__EEPROM_REGION_LENGTH__+0x3e4>
		{
			arr[z] = arr[z+2];
     782:	fc 01       	movw	r30, r24
     784:	32 96       	adiw	r30, 0x02	; 2
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e4 54       	subi	r30, 0x44	; 68
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	40 81       	ld	r20, Z
     794:	51 81       	ldd	r21, Z+1	; 0x01
     796:	62 81       	ldd	r22, Z+2	; 0x02
     798:	73 81       	ldd	r23, Z+3	; 0x03
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e4 54       	subi	r30, 0x44	; 68
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	40 83       	st	Z, r20
     7aa:	51 83       	std	Z+1, r21	; 0x01
     7ac:	62 83       	std	Z+2, r22	; 0x02
     7ae:	73 83       	std	Z+3, r23	; 0x03
			arr[z+1]=arr[z+3];
     7b0:	fc 01       	movw	r30, r24
     7b2:	31 96       	adiw	r30, 0x01	; 1
     7b4:	dc 01       	movw	r26, r24
     7b6:	13 96       	adiw	r26, 0x03	; 3
     7b8:	aa 0f       	add	r26, r26
     7ba:	bb 1f       	adc	r27, r27
     7bc:	aa 0f       	add	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	a4 54       	subi	r26, 0x44	; 68
     7c2:	bf 4f       	sbci	r27, 0xFF	; 255
     7c4:	8d 91       	ld	r24, X+
     7c6:	9d 91       	ld	r25, X+
     7c8:	0d 90       	ld	r0, X+
     7ca:	bc 91       	ld	r27, X
     7cc:	a0 2d       	mov	r26, r0
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e4 54       	subi	r30, 0x44	; 68
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	80 83       	st	Z, r24
     7dc:	91 83       	std	Z+1, r25	; 0x01
     7de:	a2 83       	std	Z+2, r26	; 0x02
     7e0:	b3 83       	std	Z+3, r27	; 0x03
	}
	if (arr[i] == '-')
	{
		arr[i-1] = arr[i-1] - arr [i+1];

		for ( z = i ; z < cnt+1 ; z+=2)
     7e2:	2e 5f       	subi	r18, 0xFE	; 254
     7e4:	82 2f       	mov	r24, r18
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <cnt.1780>
     7ec:	43 2f       	mov	r20, r19
     7ee:	03 2e       	mov	r0, r19
     7f0:	00 0c       	add	r0, r0
     7f2:	55 0b       	sbc	r21, r21
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	84 17       	cp	r24, r20
     7fa:	95 07       	cpc	r25, r21
     7fc:	14 f2       	brlt	.-124    	; 0x782 <__EEPROM_REGION_LENGTH__+0x382>
		{
			arr[z] = arr[z+2];
			arr[z+1]=arr[z+3];
		}
		cnt-=2;
     7fe:	32 50       	subi	r19, 0x02	; 2
     800:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <cnt.1780>
		i=0;
     804:	20 e0       	ldi	r18, 0x00	; 0
			i=0;
		}
}


for ( i =0 ; i < cnt +1 ; i++)
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	82 2f       	mov	r24, r18
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <cnt.1780>
     810:	43 2f       	mov	r20, r19
     812:	03 2e       	mov	r0, r19
     814:	00 0c       	add	r0, r0
     816:	55 0b       	sbc	r21, r21
     818:	4f 5f       	subi	r20, 0xFF	; 255
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	84 17       	cp	r24, r20
     81e:	95 07       	cpc	r25, r21
     820:	0c f4       	brge	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	0b cf       	rjmp	.-490    	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	20 c0       	rjmp	.+64     	; 0x868 <__stack+0x9>
}


for (i = 0 ; i <cnt+1 ; i++)
{
	res= res + arr[i];
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	fc 01       	movw	r30, r24
     832:	e4 54       	subi	r30, 0x44	; 68
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	c0 80       	ld	r12, Z
     838:	d1 80       	ldd	r13, Z+1	; 0x01
     83a:	e2 80       	ldd	r14, Z+2	; 0x02
     83c:	f3 80       	ldd	r15, Z+3	; 0x03
     83e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <res.1783>
     842:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <res.1783+0x1>
     846:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <res.1783+0x2>
     84a:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <res.1783+0x3>
     84e:	8c 0d       	add	r24, r12
     850:	9d 1d       	adc	r25, r13
     852:	ae 1d       	adc	r26, r14
     854:	bf 1d       	adc	r27, r15
     856:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <res.1783>
     85a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <res.1783+0x1>
     85e:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <res.1783+0x2>
     862:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <res.1783+0x3>
		i=0;
	}
}


for (i = 0 ; i <cnt+1 ; i++)
     866:	2f 5f       	subi	r18, 0xFF	; 255
     868:	82 2f       	mov	r24, r18
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	84 17       	cp	r24, r20
     86e:	95 07       	cpc	r25, r21
     870:	dc f2       	brlt	.-74     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
{
	res= res + arr[i];
	
}
num =res;
     872:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <res.1783>
     876:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <res.1783+0x1>
     87a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <res.1783+0x2>
     87e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <res.1783+0x3>
     882:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <num.1781>
     886:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <num.1781+0x1>
     88a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <num.1781+0x2>
     88e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <num.1781+0x3>
LCD_WriteInt(res);
     892:	0e 94 a9 05 	call	0xb52	; 0xb52 <LCD_WriteInt>
cnt=0;
     896:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cnt.1780>
for (i = 0 ; i <32 ; i++)
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <__stack+0x59>
{
	arr[i]=0;
     89e:	e8 2f       	mov	r30, r24
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e4 54       	subi	r30, 0x44	; 68
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	10 82       	st	Z, r1
     8b0:	11 82       	std	Z+1, r1	; 0x01
     8b2:	12 82       	std	Z+2, r1	; 0x02
     8b4:	13 82       	std	Z+3, r1	; 0x03
	
}
num =res;
LCD_WriteInt(res);
cnt=0;
for (i = 0 ; i <32 ; i++)
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
     8b8:	80 32       	cpi	r24, 0x20	; 32
     8ba:	88 f3       	brcs	.-30     	; 0x89e <__stack+0x3f>



}

}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	08 95       	ret

000008d6 <KEYPAD_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/

void KEYPAD_Init(void)
{
	DIO_WriteChannel( KEYPAD_ROW0 , PIN_HIGH );
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	8c e0       	ldi	r24, 0x0C	; 12
     8da:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW1 , PIN_HIGH );
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	8d e0       	ldi	r24, 0x0D	; 13
     8e2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW2 , PIN_HIGH );
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	8e e0       	ldi	r24, 0x0E	; 14
     8ea:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW3 , PIN_HIGH );	
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8f e0       	ldi	r24, 0x0F	; 15
     8f2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     8f6:	08 95       	ret

000008f8 <KEYPAD_GetValue>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
Uint_8 KEYPAD_GetValue(void)
{
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	1f 92       	push	r1
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
	Uint_8 ROW_POS= 0 , COL_POS= 0 , Button_Val= 0 , Temp =0;
     908:	19 82       	std	Y+1, r1	; 0x01
     90a:	f1 2c       	mov	r15, r1
	for(ROW_POS = ROW_INIT  ; ROW_POS<= ROW_FINAL  ; ROW_POS++ )
     90c:	0c e0       	ldi	r16, 0x0C	; 12
     90e:	38 c0       	rjmp	.+112    	; 0x980 <KEYPAD_GetValue+0x88>
	{
		DIO_WriteChannel( ROW_POS , PIN_LOW);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	80 2f       	mov	r24, r16
     914:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
		for (COL_POS= COLUMN_INIT ; COL_POS<= COLUMN_FINAL ; COL_POS++ )
     918:	1a e1       	ldi	r17, 0x1A	; 26
     91a:	2b c0       	rjmp	.+86     	; 0x972 <KEYPAD_GetValue+0x7a>
		{
			DIO_ReadChannel(COL_POS,&Temp);
     91c:	be 01       	movw	r22, r28
     91e:	6f 5f       	subi	r22, 0xFF	; 255
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	81 2f       	mov	r24, r17
     924:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_ReadChannel>
			if (Temp == 0)
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	81 11       	cpse	r24, r1
     92c:	21 c0       	rjmp	.+66     	; 0x970 <KEYPAD_GetValue+0x78>
			{
				Button_Val =KEYPAD_VALUE[ROW_POS-ROW_INIT][COL_POS-COLUMN_INIT];
     92e:	80 2f       	mov	r24, r16
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0c 97       	sbiw	r24, 0x0c	; 12
     934:	21 2f       	mov	r18, r17
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	2a 51       	subi	r18, 0x1A	; 26
     93a:	31 09       	sbc	r19, r1
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	80 5a       	subi	r24, 0xA0	; 160
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	fc 01       	movw	r30, r24
     94a:	e2 0f       	add	r30, r18
     94c:	f3 1f       	adc	r31, r19
     94e:	f0 80       	ld	r15, Z
				while (Temp == 0)
     950:	06 c0       	rjmp	.+12     	; 0x95e <KEYPAD_GetValue+0x66>
				{
					DIO_ReadChannel(COL_POS,&Temp);
     952:	be 01       	movw	r22, r28
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	81 2f       	mov	r24, r17
     95a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_ReadChannel>
		{
			DIO_ReadChannel(COL_POS,&Temp);
			if (Temp == 0)
			{
				Button_Val =KEYPAD_VALUE[ROW_POS-ROW_INIT][COL_POS-COLUMN_INIT];
				while (Temp == 0)
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	88 23       	and	r24, r24
     962:	b9 f3       	breq	.-18     	; 0x952 <KEYPAD_GetValue+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     964:	8f e3       	ldi	r24, 0x3F	; 63
     966:	9c e9       	ldi	r25, 0x9C	; 156
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <KEYPAD_GetValue+0x70>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <KEYPAD_GetValue+0x76>
     96e:	00 00       	nop
{
	Uint_8 ROW_POS= 0 , COL_POS= 0 , Button_Val= 0 , Temp =0;
	for(ROW_POS = ROW_INIT  ; ROW_POS<= ROW_FINAL  ; ROW_POS++ )
	{
		DIO_WriteChannel( ROW_POS , PIN_LOW);
		for (COL_POS= COLUMN_INIT ; COL_POS<= COLUMN_FINAL ; COL_POS++ )
     970:	1f 5f       	subi	r17, 0xFF	; 255
     972:	1e 31       	cpi	r17, 0x1E	; 30
     974:	98 f2       	brcs	.-90     	; 0x91c <KEYPAD_GetValue+0x24>
					DIO_ReadChannel(COL_POS,&Temp);
				}
				_delay_ms(10);
			}
		}
		DIO_WriteChannel( ROW_POS , PIN_HIGH);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	80 2f       	mov	r24, r16
     97a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
*                                    E_NOT_OK
*******************************************************************************/
Uint_8 KEYPAD_GetValue(void)
{
	Uint_8 ROW_POS= 0 , COL_POS= 0 , Button_Val= 0 , Temp =0;
	for(ROW_POS = ROW_INIT  ; ROW_POS<= ROW_FINAL  ; ROW_POS++ )
     97e:	0f 5f       	subi	r16, 0xFF	; 255
     980:	00 31       	cpi	r16, 0x10	; 16
     982:	30 f2       	brcs	.-116    	; 0x910 <KEYPAD_GetValue+0x18>
			}
		}
		DIO_WriteChannel( ROW_POS , PIN_HIGH);
	}
	return Button_Val;
}
     984:	8f 2d       	mov	r24, r15
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	08 95       	ret

00000994 <LCD_WriteCommand>:
*                                    E_NOT_OK
*******************************************************************************/

void LCD_Clear(void)
{
	LCD_WriteCommand(0X01);
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	1f 92       	push	r1
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	18 2f       	mov	r17, r24
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5f       	subi	r22, 0xFF	; 255
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_ReadOutputPort>
     9c0:	61 2f       	mov	r22, r17
     9c2:	66 95       	lsr	r22
     9c4:	68 77       	andi	r22, 0x78	; 120
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	87 78       	andi	r24, 0x87	; 135
     9ca:	68 2b       	or	r22, r24
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	0e 94 f6 06 	call	0xdec	; 0xdec <DIO_WritePort>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     9da:	8f e9       	ldi	r24, 0x9F	; 159
     9dc:	9f e0       	ldi	r25, 0x0F	; 15
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_WriteCommand+0x4a>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <LCD_WriteCommand+0x50>
     9e4:	00 00       	nop
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     9ee:	be 01       	movw	r22, r28
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_ReadOutputPort>
     9fa:	81 2f       	mov	r24, r17
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	69 81       	ldd	r22, Y+1	; 0x01
     a0c:	67 78       	andi	r22, 0x87	; 135
     a0e:	88 77       	andi	r24, 0x78	; 120
     a10:	68 2b       	or	r22, r24
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	0e 94 f6 06 	call	0xdec	; 0xdec <DIO_WritePort>
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     a20:	8f e9       	ldi	r24, 0x9F	; 159
     a22:	9f e0       	ldi	r25, 0x0F	; 15
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_WriteCommand+0x90>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <LCD_WriteCommand+0x96>
     a2a:	00 00       	nop
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	9e e4       	ldi	r25, 0x4E	; 78
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCD_WriteCommand+0xa4>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCD_WriteCommand+0xaa>
     a3e:	00 00       	nop
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	08 95       	ret

00000a4a <LCD_Init>:
     a4a:	83 e3       	ldi	r24, 0x33	; 51
     a4c:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a50:	82 e3       	ldi	r24, 0x32	; 50
     a52:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a5c:	8c e0       	ldi	r24, 0x0C	; 12
     a5e:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
     a74:	08 95       	ret

00000a76 <LCD_WriteChar>:
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	18 2f       	mov	r17, r24
     a84:	19 82       	std	Y+1, r1	; 0x01
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_ReadOutputPort>
     aa2:	61 2f       	mov	r22, r17
     aa4:	66 95       	lsr	r22
     aa6:	68 77       	andi	r22, 0x78	; 120
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	87 78       	andi	r24, 0x87	; 135
     aac:	68 2b       	or	r22, r24
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	0e 94 f6 06 	call	0xdec	; 0xdec <DIO_WritePort>
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     abc:	8f e9       	ldi	r24, 0x9F	; 159
     abe:	9f e0       	ldi	r25, 0x0F	; 15
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <LCD_WriteChar+0x4a>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <LCD_WriteChar+0x50>
     ac6:	00 00       	nop
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     ad0:	be 01       	movw	r22, r28
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_ReadOutputPort>
     adc:	81 2f       	mov	r24, r17
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	69 81       	ldd	r22, Y+1	; 0x01
     aee:	67 78       	andi	r22, 0x87	; 135
     af0:	88 77       	andi	r24, 0x78	; 120
     af2:	68 2b       	or	r22, r24
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	0e 94 f6 06 	call	0xdec	; 0xdec <DIO_WritePort>
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     b02:	8f e9       	ldi	r24, 0x9F	; 159
     b04:	9f e0       	ldi	r25, 0x0F	; 15
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <LCD_WriteChar+0x90>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <LCD_WriteChar+0x96>
     b0c:	00 00       	nop
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_WriteChannel>
     b16:	8f e1       	ldi	r24, 0x1F	; 31
     b18:	9e e4       	ldi	r25, 0x4E	; 78
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <LCD_WriteChar+0xa4>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <LCD_WriteChar+0xaa>
     b20:	00 00       	nop
     b22:	0f 90       	pop	r0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	08 95       	ret

00000b2c <LCD_WriteString>:
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	8c 01       	movw	r16, r24
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <LCD_WriteString+0x12>
     b38:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
     b3c:	cf 5f       	subi	r28, 0xFF	; 255
     b3e:	f8 01       	movw	r30, r16
     b40:	ec 0f       	add	r30, r28
     b42:	f1 1d       	adc	r31, r1
     b44:	80 81       	ld	r24, Z
     b46:	81 11       	cpse	r24, r1
     b48:	f7 cf       	rjmp	.-18     	; 0xb38 <LCD_WriteString+0xc>
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <LCD_WriteInt>:
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
     b66:	67 2b       	or	r22, r23
     b68:	68 2b       	or	r22, r24
     b6a:	69 2b       	or	r22, r25
     b6c:	19 f4       	brne	.+6      	; 0xb74 <LCD_WriteInt+0x22>
     b6e:	80 e3       	ldi	r24, 0x30	; 48
     b70:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
     b74:	ff 20       	and	r15, r15
     b76:	5c f4       	brge	.+22     	; 0xb8e <LCD_WriteInt+0x3c>
     b78:	8d e2       	ldi	r24, 0x2D	; 45
     b7a:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
     b7e:	f0 94       	com	r15
     b80:	e0 94       	com	r14
     b82:	d0 94       	com	r13
     b84:	c0 94       	com	r12
     b86:	c1 1c       	adc	r12, r1
     b88:	d1 1c       	adc	r13, r1
     b8a:	e1 1c       	adc	r14, r1
     b8c:	f1 1c       	adc	r15, r1
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	24 c0       	rjmp	.+72     	; 0xbe0 <LCD_WriteInt+0x8e>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	aa 1f       	adc	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	4c 01       	movw	r8, r24
     ba6:	5d 01       	movw	r10, r26
     ba8:	88 0c       	add	r8, r8
     baa:	99 1c       	adc	r9, r9
     bac:	aa 1c       	adc	r10, r10
     bae:	bb 1c       	adc	r11, r11
     bb0:	88 0c       	add	r8, r8
     bb2:	99 1c       	adc	r9, r9
     bb4:	aa 1c       	adc	r10, r10
     bb6:	bb 1c       	adc	r11, r11
     bb8:	88 0e       	add	r8, r24
     bba:	99 1e       	adc	r9, r25
     bbc:	aa 1e       	adc	r10, r26
     bbe:	bb 1e       	adc	r11, r27
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	2a e0       	ldi	r18, 0x0A	; 10
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodsi4>
     bd0:	68 0d       	add	r22, r8
     bd2:	79 1d       	adc	r23, r9
     bd4:	8a 1d       	adc	r24, r10
     bd6:	9b 1d       	adc	r25, r11
     bd8:	c2 2e       	mov	r12, r18
     bda:	d3 2e       	mov	r13, r19
     bdc:	e4 2e       	mov	r14, r20
     bde:	f5 2e       	mov	r15, r21
     be0:	c1 14       	cp	r12, r1
     be2:	d1 04       	cpc	r13, r1
     be4:	e1 04       	cpc	r14, r1
     be6:	f1 04       	cpc	r15, r1
     be8:	b9 f6       	brne	.-82     	; 0xb98 <LCD_WriteInt+0x46>
     bea:	12 c0       	rjmp	.+36     	; 0xc10 <LCD_WriteInt+0xbe>
     bec:	2a e0       	ldi	r18, 0x0A	; 10
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	0e 94 b8 07 	call	0xf70	; 0xf70 <__udivmodsi4>
     bf8:	c2 2e       	mov	r12, r18
     bfa:	d3 2e       	mov	r13, r19
     bfc:	e4 2e       	mov	r14, r20
     bfe:	f5 2e       	mov	r15, r21
     c00:	80 e3       	ldi	r24, 0x30	; 48
     c02:	86 0f       	add	r24, r22
     c04:	0e 94 3b 05 	call	0xa76	; 0xa76 <LCD_WriteChar>
     c08:	6c 2d       	mov	r22, r12
     c0a:	7d 2d       	mov	r23, r13
     c0c:	8e 2d       	mov	r24, r14
     c0e:	9f 2d       	mov	r25, r15
     c10:	61 30       	cpi	r22, 0x01	; 1
     c12:	71 05       	cpc	r23, r1
     c14:	81 05       	cpc	r24, r1
     c16:	91 05       	cpc	r25, r1
     c18:	49 f7       	brne	.-46     	; 0xbec <LCD_WriteInt+0x9a>
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	08 95       	ret

00000c2c <LCD_GOTO>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GOTO(Uint_8 ROW , Uint_8 COLUMN)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <LCD_GOTO+0x6>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
	Uint_8 arr[2]= {0x80 , 0xc0};
     c36:	90 e8       	ldi	r25, 0x80	; 128
     c38:	99 83       	std	Y+1, r25	; 0x01
     c3a:	90 ec       	ldi	r25, 0xC0	; 192
     c3c:	9a 83       	std	Y+2, r25	; 0x02
		LCD_WriteCommand(arr[ROW]+COLUMN);
     c3e:	e1 e0       	ldi	r30, 0x01	; 1
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ec 0f       	add	r30, r28
     c44:	fd 1f       	adc	r31, r29
     c46:	e8 0f       	add	r30, r24
     c48:	f1 1d       	adc	r31, r1
     c4a:	80 81       	ld	r24, Z
     c4c:	86 0f       	add	r24, r22
     c4e:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_WriteCommand>
		
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <DIO_WriteChannel>:
		case 2:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN);
		break;
		
		case 3:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_INPUT_REGISTER_PIN);
     c5c:	98 2f       	mov	r25, r24
     c5e:	96 95       	lsr	r25
     c60:	96 95       	lsr	r25
     c62:	96 95       	lsr	r25
     c64:	87 70       	andi	r24, 0x07	; 7
     c66:	66 23       	and	r22, r22
     c68:	09 f4       	brne	.+2      	; 0xc6c <DIO_WriteChannel+0x10>
     c6a:	3f c0       	rjmp	.+126    	; 0xcea <DIO_WriteChannel+0x8e>
     c6c:	61 30       	cpi	r22, 0x01	; 1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <DIO_WriteChannel+0x16>
     c70:	7b c0       	rjmp	.+246    	; 0xd68 <DIO_WriteChannel+0x10c>
     c72:	91 30       	cpi	r25, 0x01	; 1
     c74:	99 f0       	breq	.+38     	; 0xc9c <DIO_WriteChannel+0x40>
     c76:	28 f0       	brcs	.+10     	; 0xc82 <DIO_WriteChannel+0x26>
     c78:	92 30       	cpi	r25, 0x02	; 2
     c7a:	e9 f0       	breq	.+58     	; 0xcb6 <DIO_WriteChannel+0x5a>
     c7c:	93 30       	cpi	r25, 0x03	; 3
     c7e:	41 f1       	breq	.+80     	; 0xcd0 <DIO_WriteChannel+0x74>
     c80:	08 95       	ret
     c82:	4b b3       	in	r20, 0x1b	; 27
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	b9 01       	movw	r22, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_WriteChannel+0x34>
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	8a 95       	dec	r24
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_WriteChannel+0x30>
     c94:	cb 01       	movw	r24, r22
     c96:	84 2b       	or	r24, r20
     c98:	8b bb       	out	0x1b, r24	; 27
     c9a:	08 95       	ret
     c9c:	48 b3       	in	r20, 0x18	; 24
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	b9 01       	movw	r22, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_WriteChannel+0x4e>
     ca6:	66 0f       	add	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	8a 95       	dec	r24
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_WriteChannel+0x4a>
     cae:	cb 01       	movw	r24, r22
     cb0:	84 2b       	or	r24, r20
     cb2:	88 bb       	out	0x18, r24	; 24
     cb4:	08 95       	ret
     cb6:	45 b3       	in	r20, 0x15	; 21
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	b9 01       	movw	r22, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_WriteChannel+0x68>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	8a 95       	dec	r24
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_WriteChannel+0x64>
     cc8:	cb 01       	movw	r24, r22
     cca:	84 2b       	or	r24, r20
     ccc:	85 bb       	out	0x15, r24	; 21
     cce:	08 95       	ret
     cd0:	42 b3       	in	r20, 0x12	; 18
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	b9 01       	movw	r22, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_WriteChannel+0x82>
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	8a 95       	dec	r24
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_WriteChannel+0x7e>
     ce2:	cb 01       	movw	r24, r22
     ce4:	84 2b       	or	r24, r20
     ce6:	82 bb       	out	0x12, r24	; 18
     ce8:	08 95       	ret
     cea:	91 30       	cpi	r25, 0x01	; 1
     cec:	a1 f0       	breq	.+40     	; 0xd16 <DIO_WriteChannel+0xba>
     cee:	28 f0       	brcs	.+10     	; 0xcfa <DIO_WriteChannel+0x9e>
     cf0:	92 30       	cpi	r25, 0x02	; 2
     cf2:	f9 f0       	breq	.+62     	; 0xd32 <DIO_WriteChannel+0xd6>
     cf4:	93 30       	cpi	r25, 0x03	; 3
     cf6:	59 f1       	breq	.+86     	; 0xd4e <DIO_WriteChannel+0xf2>
     cf8:	08 95       	ret
     cfa:	4b b3       	in	r20, 0x1b	; 27
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	b9 01       	movw	r22, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_WriteChannel+0xac>
     d04:	66 0f       	add	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_WriteChannel+0xa8>
     d0c:	cb 01       	movw	r24, r22
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8b bb       	out	0x1b, r24	; 27
     d14:	08 95       	ret
     d16:	48 b3       	in	r20, 0x18	; 24
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	b9 01       	movw	r22, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_WriteChannel+0xc8>
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	8a 95       	dec	r24
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_WriteChannel+0xc4>
     d28:	cb 01       	movw	r24, r22
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	88 bb       	out	0x18, r24	; 24
     d30:	08 95       	ret
     d32:	45 b3       	in	r20, 0x15	; 21
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	b9 01       	movw	r22, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_WriteChannel+0xe4>
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	8a 95       	dec	r24
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_WriteChannel+0xe0>
     d44:	cb 01       	movw	r24, r22
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	85 bb       	out	0x15, r24	; 21
     d4c:	08 95       	ret
     d4e:	42 b3       	in	r20, 0x12	; 18
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_WriteChannel+0x100>
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	8a 95       	dec	r24
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_WriteChannel+0xfc>
     d60:	cb 01       	movw	r24, r22
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	82 bb       	out	0x12, r24	; 18
     d68:	08 95       	ret

00000d6a <DIO_ReadChannel>:
     d6a:	98 2f       	mov	r25, r24
     d6c:	96 95       	lsr	r25
     d6e:	96 95       	lsr	r25
     d70:	96 95       	lsr	r25
     d72:	87 70       	andi	r24, 0x07	; 7
     d74:	91 30       	cpi	r25, 0x01	; 1
     d76:	99 f0       	breq	.+38     	; 0xd9e <DIO_ReadChannel+0x34>
     d78:	28 f0       	brcs	.+10     	; 0xd84 <DIO_ReadChannel+0x1a>
     d7a:	92 30       	cpi	r25, 0x02	; 2
     d7c:	e9 f0       	breq	.+58     	; 0xdb8 <DIO_ReadChannel+0x4e>
     d7e:	93 30       	cpi	r25, 0x03	; 3
     d80:	41 f1       	breq	.+80     	; 0xdd2 <DIO_ReadChannel+0x68>
     d82:	08 95       	ret
     d84:	29 b3       	in	r18, 0x19	; 25
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	a9 01       	movw	r20, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_ReadChannel+0x26>
     d8c:	55 95       	asr	r21
     d8e:	47 95       	ror	r20
     d90:	8a 95       	dec	r24
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_ReadChannel+0x22>
     d94:	ca 01       	movw	r24, r20
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	fb 01       	movw	r30, r22
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret
     d9e:	26 b3       	in	r18, 0x16	; 22
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	a9 01       	movw	r20, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_ReadChannel+0x40>
     da6:	55 95       	asr	r21
     da8:	47 95       	ror	r20
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_ReadChannel+0x3c>
     dae:	ca 01       	movw	r24, r20
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	fb 01       	movw	r30, r22
     db4:	80 83       	st	Z, r24
     db6:	08 95       	ret
     db8:	23 b3       	in	r18, 0x13	; 19
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	a9 01       	movw	r20, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_ReadChannel+0x5a>
     dc0:	55 95       	asr	r21
     dc2:	47 95       	ror	r20
     dc4:	8a 95       	dec	r24
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_ReadChannel+0x56>
     dc8:	ca 01       	movw	r24, r20
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	fb 01       	movw	r30, r22
     dce:	80 83       	st	Z, r24
     dd0:	08 95       	ret
     dd2:	20 b3       	in	r18, 0x10	; 16
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	a9 01       	movw	r20, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_ReadChannel+0x74>
     dda:	55 95       	asr	r21
     ddc:	47 95       	ror	r20
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_ReadChannel+0x70>
     de2:	ca 01       	movw	r24, r20
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	fb 01       	movw	r30, r22
     de8:	80 83       	st	Z, r24
     dea:	08 95       	ret

00000dec <DIO_WritePort>:
     dec:	86 95       	lsr	r24
     dee:	86 95       	lsr	r24
     df0:	86 95       	lsr	r24
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	41 f0       	breq	.+16     	; 0xe06 <DIO_WritePort+0x1a>
     df6:	28 f0       	brcs	.+10     	; 0xe02 <DIO_WritePort+0x16>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	39 f0       	breq	.+14     	; 0xe0a <DIO_WritePort+0x1e>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	39 f0       	breq	.+14     	; 0xe0e <DIO_WritePort+0x22>
     e00:	08 95       	ret
     e02:	6b bb       	out	0x1b, r22	; 27
     e04:	08 95       	ret
     e06:	68 bb       	out	0x18, r22	; 24
     e08:	08 95       	ret
     e0a:	65 bb       	out	0x15, r22	; 21
     e0c:	08 95       	ret
     e0e:	62 bb       	out	0x12, r22	; 18
     e10:	08 95       	ret

00000e12 <DIO_ReadOutputPort>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_ReadOutputPort(Uint_8 Pin_Num , Uint_8 *PORT_Value)
{
	Uint_8 Port = 0 ;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
     e12:	86 95       	lsr	r24
     e14:	86 95       	lsr	r24
     e16:	86 95       	lsr	r24
	
	
	switch (Port)
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	51 f0       	breq	.+20     	; 0xe30 <DIO_ReadOutputPort+0x1e>
     e1c:	28 f0       	brcs	.+10     	; 0xe28 <DIO_ReadOutputPort+0x16>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	59 f0       	breq	.+22     	; 0xe38 <DIO_ReadOutputPort+0x26>
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	69 f0       	breq	.+26     	; 0xe40 <DIO_ReadOutputPort+0x2e>
     e26:	08 95       	ret
	{
		case 0:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT);
     e28:	8b b3       	in	r24, 0x1b	; 27
     e2a:	fb 01       	movw	r30, r22
     e2c:	80 83       	st	Z, r24
		break;
     e2e:	08 95       	ret
		
		case 1:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT);
     e30:	88 b3       	in	r24, 0x18	; 24
     e32:	fb 01       	movw	r30, r22
     e34:	80 83       	st	Z, r24
		break;
     e36:	08 95       	ret
		
		case 2:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT);
     e38:	85 b3       	in	r24, 0x15	; 21
     e3a:	fb 01       	movw	r30, r22
     e3c:	80 83       	st	Z, r24
		break;
     e3e:	08 95       	ret
		
		case 3:
		*PORT_Value= PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT);
     e40:	82 b3       	in	r24, 0x12	; 18
     e42:	fb 01       	movw	r30, r22
     e44:	80 83       	st	Z, r24
     e46:	08 95       	ret

00000e48 <PORT_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	7e c0       	rjmp	.+252    	; 0xf48 <PORT_Init+0x100>
	{
		port=PORT_Initialization[cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS;
     e4c:	e9 2f       	mov	r30, r25
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e0 59       	subi	r30, 0x90	; 144
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	28 2f       	mov	r18, r24
     e5c:	26 95       	lsr	r18
     e5e:	26 95       	lsr	r18
     e60:	26 95       	lsr	r18
		pin=PORT_Initialization[cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS;
     e62:	87 70       	andi	r24, 0x07	; 7
		dir = PORT_Initialization[cnt].PIN_DIR;
     e64:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(dir)
     e66:	33 23       	and	r19, r19
     e68:	b9 f1       	breq	.+110    	; 0xed8 <PORT_Init+0x90>
     e6a:	31 30       	cpi	r19, 0x01	; 1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <PORT_Init+0x28>
     e6e:	6b c0       	rjmp	.+214    	; 0xf46 <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			switch (port)
     e70:	21 30       	cpi	r18, 0x01	; 1
     e72:	89 f0       	breq	.+34     	; 0xe96 <PORT_Init+0x4e>
     e74:	28 f0       	brcs	.+10     	; 0xe80 <PORT_Init+0x38>
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	c9 f0       	breq	.+50     	; 0xeac <PORT_Init+0x64>
     e7a:	23 30       	cpi	r18, 0x03	; 3
     e7c:	11 f1       	breq	.+68     	; 0xec2 <PORT_Init+0x7a>
     e7e:	63 c0       	rjmp	.+198    	; 0xf46 <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     e80:	4a b3       	in	r20, 0x1a	; 26
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <PORT_Init+0x44>
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <PORT_Init+0x40>
     e90:	24 2b       	or	r18, r20
     e92:	2a bb       	out	0x1a, r18	; 26
				break;
     e94:	58 c0       	rjmp	.+176    	; 0xf46 <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     e96:	47 b3       	in	r20, 0x17	; 23
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <PORT_Init+0x5a>
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	8a 95       	dec	r24
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <PORT_Init+0x56>
     ea6:	24 2b       	or	r18, r20
     ea8:	27 bb       	out	0x17, r18	; 23
				break;
     eaa:	4d c0       	rjmp	.+154    	; 0xf46 <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     eac:	44 b3       	in	r20, 0x14	; 20
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <PORT_Init+0x70>
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	8a 95       	dec	r24
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <PORT_Init+0x6c>
     ebc:	24 2b       	or	r18, r20
     ebe:	24 bb       	out	0x14, r18	; 20
				break;
     ec0:	42 c0       	rjmp	.+132    	; 0xf46 <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     ec2:	41 b3       	in	r20, 0x11	; 17
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <PORT_Init+0x86>
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	8a 95       	dec	r24
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <PORT_Init+0x82>
     ed2:	24 2b       	or	r18, r20
     ed4:	21 bb       	out	0x11, r18	; 17
				break;
     ed6:	37 c0       	rjmp	.+110    	; 0xf46 <PORT_Init+0xfe>
				break;
			}
			break;
			
			case  PIN_INPUT :
			switch (port)
     ed8:	21 30       	cpi	r18, 0x01	; 1
     eda:	91 f0       	breq	.+36     	; 0xf00 <PORT_Init+0xb8>
     edc:	28 f0       	brcs	.+10     	; 0xee8 <PORT_Init+0xa0>
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	d9 f0       	breq	.+54     	; 0xf18 <PORT_Init+0xd0>
     ee2:	23 30       	cpi	r18, 0x03	; 3
     ee4:	29 f1       	breq	.+74     	; 0xf30 <PORT_Init+0xe8>
     ee6:	2f c0       	rjmp	.+94     	; 0xf46 <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     ee8:	4a b3       	in	r20, 0x1a	; 26
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <PORT_Init+0xac>
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	8a 95       	dec	r24
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <PORT_Init+0xa8>
     ef8:	20 95       	com	r18
     efa:	24 23       	and	r18, r20
     efc:	2a bb       	out	0x1a, r18	; 26
				break;
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     f00:	47 b3       	in	r20, 0x17	; 23
     f02:	21 e0       	ldi	r18, 0x01	; 1
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <PORT_Init+0xc4>
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	8a 95       	dec	r24
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <PORT_Init+0xc0>
     f10:	20 95       	com	r18
     f12:	24 23       	and	r18, r20
     f14:	27 bb       	out	0x17, r18	; 23
				break;																	   
     f16:	17 c0       	rjmp	.+46     	; 0xf46 <PORT_Init+0xfe>
																						   
				case 2:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     f18:	44 b3       	in	r20, 0x14	; 20
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <PORT_Init+0xdc>
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	8a 95       	dec	r24
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <PORT_Init+0xd8>
     f28:	20 95       	com	r18
     f2a:	24 23       	and	r18, r20
     f2c:	24 bb       	out	0x14, r18	; 20
				break;																	   
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <PORT_Init+0xfe>
																						   
				case 3:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
     f30:	41 b3       	in	r20, 0x11	; 17
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <PORT_Init+0xf4>
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	8a 95       	dec	r24
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <PORT_Init+0xf0>
     f40:	20 95       	com	r18
     f42:	24 23       	and	r18, r20
     f44:	21 bb       	out	0x11, r18	; 17
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
     f46:	9f 5f       	subi	r25, 0xFF	; 255
     f48:	94 31       	cpi	r25, 0x14	; 20
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <PORT_Init+0x106>
     f4c:	7f cf       	rjmp	.-258    	; 0xe4c <PORT_Init+0x4>
			
			break;
		}
	}
	
}
     f4e:	08 95       	ret

00000f50 <__mulsi3>:
     f50:	db 01       	movw	r26, r22
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	0e 94 ff 07 	call	0xffe	; 0xffe <__muluhisi3>
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	a2 9f       	mul	r26, r18
     f60:	80 0d       	add	r24, r0
     f62:	91 1d       	adc	r25, r1
     f64:	a3 9f       	mul	r26, r19
     f66:	90 0d       	add	r25, r0
     f68:	b2 9f       	mul	r27, r18
     f6a:	90 0d       	add	r25, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	08 95       	ret

00000f70 <__udivmodsi4>:
     f70:	a1 e2       	ldi	r26, 0x21	; 33
     f72:	1a 2e       	mov	r1, r26
     f74:	aa 1b       	sub	r26, r26
     f76:	bb 1b       	sub	r27, r27
     f78:	fd 01       	movw	r30, r26
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <__udivmodsi4_ep>

00000f7c <__udivmodsi4_loop>:
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	ee 1f       	adc	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	a2 17       	cp	r26, r18
     f86:	b3 07       	cpc	r27, r19
     f88:	e4 07       	cpc	r30, r20
     f8a:	f5 07       	cpc	r31, r21
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__udivmodsi4_ep>
     f8e:	a2 1b       	sub	r26, r18
     f90:	b3 0b       	sbc	r27, r19
     f92:	e4 0b       	sbc	r30, r20
     f94:	f5 0b       	sbc	r31, r21

00000f96 <__udivmodsi4_ep>:
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	1a 94       	dec	r1
     fa0:	69 f7       	brne	.-38     	; 0xf7c <__udivmodsi4_loop>
     fa2:	60 95       	com	r22
     fa4:	70 95       	com	r23
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	bd 01       	movw	r22, r26
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret

00000fb4 <__divmodsi4>:
     fb4:	05 2e       	mov	r0, r21
     fb6:	97 fb       	bst	r25, 7
     fb8:	1e f4       	brtc	.+6      	; 0xfc0 <__divmodsi4+0xc>
     fba:	00 94       	com	r0
     fbc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__negsi2>
     fc0:	57 fd       	sbrc	r21, 7
     fc2:	07 d0       	rcall	.+14     	; 0xfd2 <__divmodsi4_neg2>
     fc4:	0e 94 b8 07 	call	0xf70	; 0xf70 <__udivmodsi4>
     fc8:	07 fc       	sbrc	r0, 7
     fca:	03 d0       	rcall	.+6      	; 0xfd2 <__divmodsi4_neg2>
     fcc:	4e f4       	brtc	.+18     	; 0xfe0 <__divmodsi4_exit>
     fce:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__negsi2>

00000fd2 <__divmodsi4_neg2>:
     fd2:	50 95       	com	r21
     fd4:	40 95       	com	r20
     fd6:	30 95       	com	r19
     fd8:	21 95       	neg	r18
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	4f 4f       	sbci	r20, 0xFF	; 255
     fde:	5f 4f       	sbci	r21, 0xFF	; 255

00000fe0 <__divmodsi4_exit>:
     fe0:	08 95       	ret

00000fe2 <__negsi2>:
     fe2:	90 95       	com	r25
     fe4:	80 95       	com	r24
     fe6:	70 95       	com	r23
     fe8:	61 95       	neg	r22
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__tablejump2__>:
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	05 90       	lpm	r0, Z+
     ff8:	f4 91       	lpm	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	09 94       	ijmp

00000ffe <__muluhisi3>:
     ffe:	0e 94 0a 08 	call	0x1014	; 0x1014 <__umulhisi3>
    1002:	a5 9f       	mul	r26, r21
    1004:	90 0d       	add	r25, r0
    1006:	b4 9f       	mul	r27, r20
    1008:	90 0d       	add	r25, r0
    100a:	a4 9f       	mul	r26, r20
    100c:	80 0d       	add	r24, r0
    100e:	91 1d       	adc	r25, r1
    1010:	11 24       	eor	r1, r1
    1012:	08 95       	ret

00001014 <__umulhisi3>:
    1014:	a2 9f       	mul	r26, r18
    1016:	b0 01       	movw	r22, r0
    1018:	b3 9f       	mul	r27, r19
    101a:	c0 01       	movw	r24, r0
    101c:	a3 9f       	mul	r26, r19
    101e:	70 0d       	add	r23, r0
    1020:	81 1d       	adc	r24, r1
    1022:	11 24       	eor	r1, r1
    1024:	91 1d       	adc	r25, r1
    1026:	b2 9f       	mul	r27, r18
    1028:	70 0d       	add	r23, r0
    102a:	81 1d       	adc	r24, r1
    102c:	11 24       	eor	r1, r1
    102e:	91 1d       	adc	r25, r1
    1030:	08 95       	ret

00001032 <_exit>:
    1032:	f8 94       	cli

00001034 <__stop_program>:
    1034:	ff cf       	rjmp	.-2      	; 0x1034 <__stop_program>
