
DC MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000005b6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800092  00800092  0000067c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121d  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b28  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000757  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8f  00000000  00000000  00003bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3c       	cpi	r26, 0xC8	; 200
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>


int main(void)
{
    PORT_Init();
  92:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <PORT_Init>
	DCMOTOR_Init();
  96:	0e 94 5f 00 	call	0xbe	; 0xbe <DCMOTOR_Init>
	DCMOTOR_ForSpeed(60);
  9a:	8c e3       	ldi	r24, 0x3C	; 60
  9c:	0e 94 79 00 	call	0xf2	; 0xf2 <DCMOTOR_ForSpeed>
	DCMOTOR_ForDirection(RIGHT);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 62 00 	call	0xc4	; 0xc4 <DCMOTOR_ForDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x24>
  b6:	00 00       	nop
	_delay_ms(1000);
	DCMOTOR_Stop();
  b8:	0e 94 7c 00 	call	0xf8	; 0xf8 <DCMOTOR_Stop>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2a>

000000be <DCMOTOR_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void DCMOTOR_Init(void)
{
	PWM_Init();
  be:	0e 94 67 02 	call	0x4ce	; 0x4ce <PWM_Init>
  c2:	08 95       	ret

000000c4 <DCMOTOR_ForDirection>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void DCMOTOR_ForDirection(Motor_Dir_e Direction)
{
	switch (Direction)
  c4:	88 23       	and	r24, r24
  c6:	19 f0       	breq	.+6      	; 0xce <DCMOTOR_ForDirection+0xa>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	51 f0       	breq	.+20     	; 0xe0 <DCMOTOR_ForDirection+0x1c>
  cc:	08 95       	ret
	{
		case RIGHT:
		DIO_WriteChannel(PORTC_PIN0,PIN_HIGH);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
		DIO_WriteChannel(PORTC_PIN1,PIN_LOW);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e1       	ldi	r24, 0x11	; 17
  da:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
		break;
  de:	08 95       	ret
		case LEFT:
		DIO_WriteChannel(PORTC_PIN0,PIN_LOW);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
		DIO_WriteChannel(PORTC_PIN1,PIN_HIGH);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e1       	ldi	r24, 0x11	; 17
  ec:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
  f0:	08 95       	ret

000000f2 <DCMOTOR_ForSpeed>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void DCMOTOR_ForSpeed(Uint_8 Speed)
{
	PWM0_Generate(Speed);
  f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <PWM0_Generate>
  f6:	08 95       	ret

000000f8 <DCMOTOR_Stop>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void DCMOTOR_Stop(void)
{
	DIO_WriteChannel(PORTC_PIN0,PIN_HIGH);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
	DIO_WriteChannel(PORTC_PIN1,PIN_HIGH);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	81 e1       	ldi	r24, 0x11	; 17
 104:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_WriteChannel>
 108:	08 95       	ret

0000010a <DIO_WriteChannel>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void DIO_WriteChannel(Uint_8 Pin_Num , PIN_VALUE_t Pin_Value)
{
	Uint_8 Port = 0 ,Pin = 0;
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS;
 10a:	98 2f       	mov	r25, r24
 10c:	96 95       	lsr	r25
 10e:	96 95       	lsr	r25
 110:	96 95       	lsr	r25
	Pin = Pin_Num % NUMBER_OF_EACH_PORT_PINS;
 112:	87 70       	andi	r24, 0x07	; 7
	switch(Pin_Value)
 114:	66 23       	and	r22, r22
 116:	09 f4       	brne	.+2      	; 0x11a <DIO_WriteChannel+0x10>
 118:	3f c0       	rjmp	.+126    	; 0x198 <DIO_WriteChannel+0x8e>
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <DIO_WriteChannel+0x16>
 11e:	7b c0       	rjmp	.+246    	; 0x216 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH:
		switch (Port)
 120:	91 30       	cpi	r25, 0x01	; 1
 122:	99 f0       	breq	.+38     	; 0x14a <DIO_WriteChannel+0x40>
 124:	28 f0       	brcs	.+10     	; 0x130 <DIO_WriteChannel+0x26>
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	e9 f0       	breq	.+58     	; 0x164 <DIO_WriteChannel+0x5a>
 12a:	93 30       	cpi	r25, 0x03	; 3
 12c:	41 f1       	breq	.+80     	; 0x17e <DIO_WriteChannel+0x74>
 12e:	08 95       	ret
		{
			case 0:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 130:	4b b3       	in	r20, 0x1b	; 27
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0x34>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0x30>
 142:	cb 01       	movw	r24, r22
 144:	84 2b       	or	r24, r20
 146:	8b bb       	out	0x1b, r24	; 27
			break;
 148:	08 95       	ret
			
			case 1:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 14a:	48 b3       	in	r20, 0x18	; 24
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_WriteChannel+0x4e>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_WriteChannel+0x4a>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	88 bb       	out	0x18, r24	; 24
			break;
 162:	08 95       	ret
			
			case 2:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 164:	45 b3       	in	r20, 0x15	; 21
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WriteChannel+0x68>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WriteChannel+0x64>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	85 bb       	out	0x15, r24	; 21
			break;
 17c:	08 95       	ret
			
			case 3:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_WriteChannel+0x82>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_WriteChannel+0x7e>
 190:	cb 01       	movw	r24, r22
 192:	84 2b       	or	r24, r20
 194:	82 bb       	out	0x12, r24	; 18
			break;
 196:	08 95       	ret
			
			break;
		}
		break;
		case PIN_LOW: 
		switch (Port)
 198:	91 30       	cpi	r25, 0x01	; 1
 19a:	a1 f0       	breq	.+40     	; 0x1c4 <DIO_WriteChannel+0xba>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <DIO_WriteChannel+0x9e>
 19e:	92 30       	cpi	r25, 0x02	; 2
 1a0:	f9 f0       	breq	.+62     	; 0x1e0 <DIO_WriteChannel+0xd6>
 1a2:	93 30       	cpi	r25, 0x03	; 3
 1a4:	59 f1       	breq	.+86     	; 0x1fc <DIO_WriteChannel+0xf2>
 1a6:	08 95       	ret
		{
			case 0:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 1a8:	4b b3       	in	r20, 0x1b	; 27
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WriteChannel+0xac>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WriteChannel+0xa8>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8b bb       	out	0x1b, r24	; 27
			break;
 1c2:	08 95       	ret
			
			case 1:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 1c4:	48 b3       	in	r20, 0x18	; 24
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WriteChannel+0xc8>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	8a 95       	dec	r24
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WriteChannel+0xc4>
 1d6:	cb 01       	movw	r24, r22
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	88 bb       	out	0x18, r24	; 24
			break;
 1de:	08 95       	ret
			
			case 2:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 1e0:	45 b3       	in	r20, 0x15	; 21
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WriteChannel+0xe4>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WriteChannel+0xe0>
 1f2:	cb 01       	movw	r24, r22
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	85 bb       	out	0x15, r24	; 21
			break;
 1fa:	08 95       	ret
			
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_OUTPUT_REGISTER_PORT),Pin);
 1fc:	42 b3       	in	r20, 0x12	; 18
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	b9 01       	movw	r22, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WriteChannel+0x100>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WriteChannel+0xfc>
 20e:	cb 01       	movw	r24, r22
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	82 bb       	out	0x12, r24	; 18
 216:	08 95       	ret

00000218 <__vector_1>:
{
	CallBack_PtrFunc[Interrupt_Vector_Index]=p;
}

ISR(INT0_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	if (CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX]!=Null)
 23a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <CallBack_PtrFunc>
 23e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <CallBack_PtrFunc+0x1>
 242:	30 97       	sbiw	r30, 0x00	; 0
 244:	09 f0       	breq	.+2      	; 0x248 <__vector_1+0x30>
	{
		(*CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX])();
 246:	09 95       	icall
	}
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_16>:

ISR(ADC_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	Uint_32 ADC_Digital_Value= Right_Adjust;
 28c:	24 b1       	in	r18, 0x04	; 4
 28e:	35 b1       	in	r19, 0x05	; 5
		ADC_Vin_Value_mV= (ADC_Digital_Value *5000)/1023;
 290:	a8 e8       	ldi	r26, 0x88	; 136
 292:	b3 e1       	ldi	r27, 0x13	; 19
 294:	0e 94 b6 02 	call	0x56c	; 0x56c <__umulhisi3>
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	33 e0       	ldi	r19, 0x03	; 3
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodsi4>
 2a4:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <__data_end>
 2a8:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <__data_end+0x1>
 2ac:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <__data_end+0x2>
 2b0:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <__data_end+0x3>

	if (CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX]!=Null)
 2b4:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <CallBack_PtrFunc+0x1e>
 2b8:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <CallBack_PtrFunc+0x1f>
 2bc:	30 97       	sbiw	r30, 0x00	; 0
 2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_16+0x58>
	{
		(*CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX])();
 2c0:	09 95       	icall
	}
	
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	
	static Uint_8 INT_CNT_1=0;
	INT_CNT_1++;
 306:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <INT_CNT_1.1652>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <INT_CNT_1.1652>
	if(INT_CNT_1 == TIMER0_Number_OVRflows_g)
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	a0 e0       	ldi	r26, 0x00	; 0
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <TIMER0_Number_OVRflows_g>
 31a:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <TIMER0_Number_OVRflows_g+0x1>
 31e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <TIMER0_Number_OVRflows_g+0x2>
 322:	70 91 c7 00 	lds	r23, 0x00C7	; 0x8000c7 <TIMER0_Number_OVRflows_g+0x3>
 326:	84 17       	cp	r24, r20
 328:	95 07       	cpc	r25, r21
 32a:	a6 07       	cpc	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	51 f4       	brne	.+20     	; 0x344 <__vector_11+0x60>
	{
		(*CallBack_PtrFunc[Timer_Counter0_Overflow_VECTOR_INDEX])();
 330:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CallBack_PtrFunc+0x14>
 334:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CallBack_PtrFunc+0x15>
 338:	09 95       	icall
		INT_CNT_1 =0;
 33a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <INT_CNT_1.1652>
		TCNT0 = TIMER0_Init_Value_g;
 33e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <TIMER0_Init_Value_g>
 342:	82 bf       	out	0x32, r24	; 50
	}
}
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
	static Uint_8 INT_CNT_2=0;
	INT_CNT_2++;
 388:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <INT_CNT_2.1658>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <INT_CNT_2.1658>
	if(INT_CNT_2 == 1)
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	39 f4       	brne	.+14     	; 0x3a4 <__vector_7+0x3e>
	{
		(*CallBack_PtrFunc[Timer_Counter1_Compare_Match_A_VECTOR_INDEX])();
 396:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <CallBack_PtrFunc+0xc>
 39a:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <CallBack_PtrFunc+0xd>
 39e:	09 95       	icall
		INT_CNT_2 =0;
 3a0:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <INT_CNT_2.1658>
		
	}
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <PORT_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	7e c0       	rjmp	.+252    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
	{
		port=PORT_Initialization[cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS;
 3ca:	e9 2f       	mov	r30, r25
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	e0 5a       	subi	r30, 0xA0	; 160
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	80 81       	ld	r24, Z
 3d8:	28 2f       	mov	r18, r24
 3da:	26 95       	lsr	r18
 3dc:	26 95       	lsr	r18
 3de:	26 95       	lsr	r18
		pin=PORT_Initialization[cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS;
 3e0:	87 70       	andi	r24, 0x07	; 7
		dir = PORT_Initialization[cnt].PIN_DIR;
 3e2:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(dir)
 3e4:	33 23       	and	r19, r19
 3e6:	b9 f1       	breq	.+110    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 3e8:	31 30       	cpi	r19, 0x01	; 1
 3ea:	09 f0       	breq	.+2      	; 0x3ee <PORT_Init+0x28>
 3ec:	6b c0       	rjmp	.+214    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		{
			case PIN_OUTPUT :
			switch (port)
 3ee:	21 30       	cpi	r18, 0x01	; 1
 3f0:	89 f0       	breq	.+34     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f2:	28 f0       	brcs	.+10     	; 0x3fe <PORT_Init+0x38>
 3f4:	22 30       	cpi	r18, 0x02	; 2
 3f6:	c9 f0       	breq	.+50     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3f8:	23 30       	cpi	r18, 0x03	; 3
 3fa:	11 f1       	breq	.+68     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3fc:	63 c0       	rjmp	.+198    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 3fe:	4a b3       	in	r20, 0x1a	; 26
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	24 2b       	or	r18, r20
 410:	2a bb       	out	0x1a, r18	; 26
				break;
 412:	58 c0       	rjmp	.+176    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 414:	47 b3       	in	r20, 0x17	; 23
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	24 2b       	or	r18, r20
 426:	27 bb       	out	0x17, r18	; 23
				break;
 428:	4d c0       	rjmp	.+154    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 42a:	44 b3       	in	r20, 0x14	; 20
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	24 2b       	or	r18, r20
 43c:	24 bb       	out	0x14, r18	; 20
				break;
 43e:	42 c0       	rjmp	.+132    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 440:	41 b3       	in	r20, 0x11	; 17
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	24 2b       	or	r18, r20
 452:	21 bb       	out	0x11, r18	; 17
				break;
 454:	37 c0       	rjmp	.+110    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				break;
			}
			break;
			
			case  PIN_INPUT :
			switch (port)
 456:	21 30       	cpi	r18, 0x01	; 1
 458:	91 f0       	breq	.+36     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 45a:	28 f0       	brcs	.+10     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	d9 f0       	breq	.+54     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 460:	23 30       	cpi	r18, 0x03	; 3
 462:	29 f1       	breq	.+74     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 464:	2f c0       	rjmp	.+94     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 466:	4a b3       	in	r20, 0x1a	; 26
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	20 95       	com	r18
 478:	24 23       	and	r18, r20
 47a:	2a bb       	out	0x1a, r18	; 26
				break;
 47c:	23 c0       	rjmp	.+70     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 47e:	47 b3       	in	r20, 0x17	; 23
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	20 95       	com	r18
 490:	24 23       	and	r18, r20
 492:	27 bb       	out	0x17, r18	; 23
				break;																	   
 494:	17 c0       	rjmp	.+46     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
																						   
				case 2:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 496:	44 b3       	in	r20, 0x14	; 20
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	20 95       	com	r18
 4a8:	24 23       	and	r18, r20
 4aa:	24 bb       	out	0x14, r18	; 20
				break;																	   
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
																						   
				case 3:																	   
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRESS+GPIO_DIRECTION_REGISTER_DDR),pin);
 4ae:	41 b3       	in	r20, 0x11	; 17
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	20 95       	com	r18
 4c0:	24 23       	and	r18, r20
 4c2:	21 bb       	out	0x11, r18	; 17
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
	Uint_8 port=0,pin=0,dir=0,cnt=0;
	for (cnt=0;cnt< DEFINED_PINS ;cnt++)
 4c4:	9f 5f       	subi	r25, 0xFF	; 255
 4c6:	99 31       	cpi	r25, 0x19	; 25
 4c8:	08 f4       	brcc	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ca:	7f cf       	rjmp	.-258    	; 0x3ca <PORT_Init+0x4>
			
			break;
		}
	}
	
}
 4cc:	08 95       	ret

000004ce <PWM_Init>:
*******************************************************************************/
void PWM_Init(void)
{
	#if (PWM0_STATE == PWM_ENABLE)
	#if (PWM0_TYPE == PWM_FAST)
	SET_BIT(TCCR0,6);
 4ce:	83 b7       	in	r24, 0x33	; 51
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
 4d4:	83 b7       	in	r24, 0x33	; 51
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	83 bf       	out	0x33, r24	; 51
	
	#if (PWM0_MODE == PWM_INVERTED)
	SET_BIT(TCCR0,5);
	SET_BIT(TCCR0,4);
	#elif (PWM0_MODE == PWM_NONINVERTED)
	SET_BIT(TCCR0,5);
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	80 62       	ori	r24, 0x20	; 32
 4de:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,4);
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	8f 7e       	andi	r24, 0xEF	; 239
 4e4:	83 bf       	out	0x33, r24	; 51
 4e6:	08 95       	ret

000004e8 <PWM0_Generate>:
	#if (PWM0_STATE == PWM_ENABLE)
	  #if (PWM0_TYPE == PWM_FAST)
	    #if (PWM0_MODE == PWM_INVERTED)
	    OCR0 = 255 - ((Duty_Cycle *256)/100);
	    #elif (PWM0_MODE == PWM_NONINVERTED)
        OCR0 = ((Duty_Cycle *256)/100)-1;
 4e8:	98 2f       	mov	r25, r24
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	64 e6       	ldi	r22, 0x64	; 100
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 4f4:	61 50       	subi	r22, 0x01	; 1
 4f6:	6c bf       	out	0x3c, r22	; 60
	    #elif (PWM0_MODE == PWM_NONINVERTED)
        OCR0 = ((Duty_Cycle *255)/100)-1;
	    #endif /*(PWM0_MODE == PWM_INVERTED)*/
	#endif /*(PWM0_TYPE == PWM_FAST)*/
	#if (PWM0_PRESC == PWM_PRESC8)
	TCCR0 |=0X02;
 4f8:	83 b7       	in	r24, 0x33	; 51
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	83 bf       	out	0x33, r24	; 51
 4fe:	08 95       	ret

00000500 <__divmodhi4>:
 500:	97 fb       	bst	r25, 7
 502:	07 2e       	mov	r0, r23
 504:	16 f4       	brtc	.+4      	; 0x50a <__divmodhi4+0xa>
 506:	00 94       	com	r0
 508:	07 d0       	rcall	.+14     	; 0x518 <__divmodhi4_neg1>
 50a:	77 fd       	sbrc	r23, 7
 50c:	09 d0       	rcall	.+18     	; 0x520 <__divmodhi4_neg2>
 50e:	0e 94 c5 02 	call	0x58a	; 0x58a <__udivmodhi4>
 512:	07 fc       	sbrc	r0, 7
 514:	05 d0       	rcall	.+10     	; 0x520 <__divmodhi4_neg2>
 516:	3e f4       	brtc	.+14     	; 0x526 <__divmodhi4_exit>

00000518 <__divmodhi4_neg1>:
 518:	90 95       	com	r25
 51a:	81 95       	neg	r24
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__divmodhi4_neg2>:
 520:	70 95       	com	r23
 522:	61 95       	neg	r22
 524:	7f 4f       	sbci	r23, 0xFF	; 255

00000526 <__divmodhi4_exit>:
 526:	08 95       	ret

00000528 <__udivmodsi4>:
 528:	a1 e2       	ldi	r26, 0x21	; 33
 52a:	1a 2e       	mov	r1, r26
 52c:	aa 1b       	sub	r26, r26
 52e:	bb 1b       	sub	r27, r27
 530:	fd 01       	movw	r30, r26
 532:	0d c0       	rjmp	.+26     	; 0x54e <__udivmodsi4_ep>

00000534 <__udivmodsi4_loop>:
 534:	aa 1f       	adc	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	ee 1f       	adc	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	a2 17       	cp	r26, r18
 53e:	b3 07       	cpc	r27, r19
 540:	e4 07       	cpc	r30, r20
 542:	f5 07       	cpc	r31, r21
 544:	20 f0       	brcs	.+8      	; 0x54e <__udivmodsi4_ep>
 546:	a2 1b       	sub	r26, r18
 548:	b3 0b       	sbc	r27, r19
 54a:	e4 0b       	sbc	r30, r20
 54c:	f5 0b       	sbc	r31, r21

0000054e <__udivmodsi4_ep>:
 54e:	66 1f       	adc	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	1a 94       	dec	r1
 558:	69 f7       	brne	.-38     	; 0x534 <__udivmodsi4_loop>
 55a:	60 95       	com	r22
 55c:	70 95       	com	r23
 55e:	80 95       	com	r24
 560:	90 95       	com	r25
 562:	9b 01       	movw	r18, r22
 564:	ac 01       	movw	r20, r24
 566:	bd 01       	movw	r22, r26
 568:	cf 01       	movw	r24, r30
 56a:	08 95       	ret

0000056c <__umulhisi3>:
 56c:	a2 9f       	mul	r26, r18
 56e:	b0 01       	movw	r22, r0
 570:	b3 9f       	mul	r27, r19
 572:	c0 01       	movw	r24, r0
 574:	a3 9f       	mul	r26, r19
 576:	70 0d       	add	r23, r0
 578:	81 1d       	adc	r24, r1
 57a:	11 24       	eor	r1, r1
 57c:	91 1d       	adc	r25, r1
 57e:	b2 9f       	mul	r27, r18
 580:	70 0d       	add	r23, r0
 582:	81 1d       	adc	r24, r1
 584:	11 24       	eor	r1, r1
 586:	91 1d       	adc	r25, r1
 588:	08 95       	ret

0000058a <__udivmodhi4>:
 58a:	aa 1b       	sub	r26, r26
 58c:	bb 1b       	sub	r27, r27
 58e:	51 e1       	ldi	r21, 0x11	; 17
 590:	07 c0       	rjmp	.+14     	; 0x5a0 <__udivmodhi4_ep>

00000592 <__udivmodhi4_loop>:
 592:	aa 1f       	adc	r26, r26
 594:	bb 1f       	adc	r27, r27
 596:	a6 17       	cp	r26, r22
 598:	b7 07       	cpc	r27, r23
 59a:	10 f0       	brcs	.+4      	; 0x5a0 <__udivmodhi4_ep>
 59c:	a6 1b       	sub	r26, r22
 59e:	b7 0b       	sbc	r27, r23

000005a0 <__udivmodhi4_ep>:
 5a0:	88 1f       	adc	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	5a 95       	dec	r21
 5a6:	a9 f7       	brne	.-22     	; 0x592 <__udivmodhi4_loop>
 5a8:	80 95       	com	r24
 5aa:	90 95       	com	r25
 5ac:	bc 01       	movw	r22, r24
 5ae:	cd 01       	movw	r24, r26
 5b0:	08 95       	ret

000005b2 <_exit>:
 5b2:	f8 94       	cli

000005b4 <__stop_program>:
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stop_program>
